from telegram import Update
from telegram.ext import ContextTypes, CommandHandler, MessageHandler, filters
from utils.keyboards import Keyboards
from database.database import db_manager
from database.models import (User, Post, Transaction, Chat, BotStatistics, 
                           AdminAction, UserStatus, TransactionStatus)
from config import Config
import logging
from datetime import datetime, timedelta
from sqlalchemy import func, and_
import json

logger = logging.getLogger(__name__)

class AdminPanelHandler:
    
    @staticmethod
    async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Main admin command"""
        user_id = update.effective_user.id
        
        if not Config.is_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        admin_text = """
üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
/users - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
/transactions - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∞–º–∏
/broadcast - –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞

üìä –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
        """
        
        # Add quick stats
        with db_manager.get_session() as session:
            total_users = session.query(User).count()
            active_transactions = session.query(Transaction).filter(
                Transaction.status.in_([TransactionStatus.PENDING, TransactionStatus.IN_PROGRESS])
            ).count()
            today_posts = session.query(Post).filter(
                func.date(Post.created_at) == datetime.now().date()
            ).count()
            
            admin_text += f"\nüë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}"
            admin_text += f"\nü§ù –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {active_transactions}"
            admin_text += f"\nüìù –ü–æ—Å—Ç–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {today_posts}"
        
        await update.message.reply_text(admin_text)
    
    @staticmethod
    async def admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show detailed statistics"""
        user_id = update.effective_user.id
        
        if not Config.is_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        with db_manager.get_session() as session:
            # Calculate various statistics
            today = datetime.now().date()
            week_ago = today - timedelta(days=7)
            month_ago = today - timedelta(days=30)
            
            # User statistics
            total_users = session.query(User).count()
            new_users_today = session.query(User).filter(
                func.date(User.created_at) == today
            ).count()
            new_users_week = session.query(User).filter(
                User.created_at >= week_ago
            ).count()
            new_users_month = session.query(User).filter(
                User.created_at >= month_ago
            ).count()
            
            # Transaction statistics
            total_transactions = session.query(Transaction).count()
            completed_transactions = session.query(Transaction).filter(
                Transaction.status == TransactionStatus.COMPLETED
            ).count()
            cancelled_transactions = session.query(Transaction).filter(
                Transaction.status == TransactionStatus.CANCELLED
            ).count()
            
            # Calculate transaction success rate
            success_rate = (completed_transactions / total_transactions * 100) if total_transactions > 0 else 0
            
            # Revenue statistics
            total_revenue = session.query(func.sum(Transaction.commission)).filter(
                Transaction.status == TransactionStatus.COMPLETED
            ).scalar() or 0
            
            # Post statistics
            total_posts = session.query(Post).count()
            active_posts = session.query(Post).filter(Post.is_active == True).count()
            
            # Today's statistics
            today_transactions = session.query(Transaction).filter(
                func.date(Transaction.created_at) == today
            ).count()
            today_revenue = session.query(func.sum(Transaction.commission)).filter(
                and_(
                    func.date(Transaction.created_at) == today,
                    Transaction.status == TransactionStatus.COMPLETED
                )
            ).scalar() or 0
            
            # Weekly statistics
            week_transactions = session.query(Transaction).filter(
                Transaction.created_at >= week_ago
            ).count()
            week_revenue = session.query(func.sum(Transaction.commission)).filter(
                and_(
                    Transaction.created_at >= week_ago,
                    Transaction.status == TransactionStatus.COMPLETED
                )
            ).scalar() or 0
            
            # Monthly statistics
            month_transactions = session.query(Transaction).filter(
                Transaction.created_at >= month_ago
            ).count()
            month_revenue = session.query(func.sum(Transaction.commission)).filter(
                and_(
                    Transaction.created_at >= month_ago,
                    Transaction.status == TransactionStatus.COMPLETED
                )
            ).scalar() or 0
            
            # Top sellers this month
            top_sellers = session.query(
                User.first_name, User.username, func.count(Transaction.id).label('transaction_count')
            ).join(Transaction, User.id == Transaction.seller_id).filter(
                and_(
                    Transaction.created_at >= month_ago,
                    Transaction.status == TransactionStatus.COMPLETED
                )
            ).group_by(User.id).order_by(func.count(Transaction.id).desc()).limit(5).all()
        
        stats_text = f"""
üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üë• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:
‚Ä¢ –í—Å–µ–≥–æ: {total_users}
‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {new_users_today}
‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {new_users_week}
‚Ä¢ –ó–∞ –º–µ—Å—è—Ü: {new_users_month}

ü§ù –°–î–ï–õ–ö–ò:
‚Ä¢ –í—Å–µ–≥–æ: {total_transactions}
‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed_transactions}
‚Ä¢ –û—Ç–º–µ–Ω–µ–Ω–æ: {cancelled_transactions}
‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%

üí∞ –î–û–•–û–î:
‚Ä¢ –û–±—â–∏–π: {total_revenue:.2f} –≥—Ä–Ω
‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {today_revenue:.2f} –≥—Ä–Ω
‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {week_revenue:.2f} –≥—Ä–Ω
‚Ä¢ –ó–∞ –º–µ—Å—è—Ü: {month_revenue:.2f} –≥—Ä–Ω

üìù –û–ë–™–Ø–í–õ–ï–ù–ò–Ø:
‚Ä¢ –í—Å–µ–≥–æ: {total_posts}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_posts}

üìà –ê–ö–¢–ò–í–ù–û–°–¢–¨:
‚Ä¢ –°–¥–µ–ª–∫–∏ —Å–µ–≥–æ–¥–Ω—è: {today_transactions}
‚Ä¢ –°–¥–µ–ª–∫–∏ –∑–∞ –Ω–µ–¥–µ–ª—é: {week_transactions}
‚Ä¢ –°–¥–µ–ª–∫–∏ –∑–∞ –º–µ—Å—è—Ü: {month_transactions}

üèÜ –¢–û–ü –ü–†–û–î–ê–í–¶–´ (–º–µ—Å—è—Ü):
        """
        
        for i, seller in enumerate(top_sellers, 1):
            username = f"@{seller.username}" if seller.username else "–Ω–µ—Ç"
            stats_text += f"\n{i}. {seller.first_name} ({username}) - {seller.transaction_count} —Å–¥–µ–ª–æ–∫"
        
        await update.message.reply_text(stats_text)
    
    @staticmethod
    async def admin_users_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """User management command"""
        user_id = update.effective_user.id
        
        if not Config.is_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        if context.args:
            target_user_id = context.args[0]
            
            # Check if it's a numeric ID or username
            if target_user_id.isdigit():
                await AdminPanelHandler._show_user_details_by_id(update, context, int(target_user_id))
            elif target_user_id.startswith('@'):
                await AdminPanelHandler._show_user_details_by_username(update, context, target_user_id[1:])
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                    "/users [user_id] –∏–ª–∏ /users @username"
                )
        else:
            await AdminPanelHandler._show_users_list(update, context)
    
    @staticmethod
    async def _show_user_details_by_id(update: Update, context: ContextTypes.DEFAULT_TYPE, telegram_id: int):
        """Show user details by Telegram ID"""
        with db_manager.get_session() as session:
            user = session.query(User).filter(User.telegram_id == telegram_id).first()
            
            if not user:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            await AdminPanelHandler._display_user_details(update, context, user)
    
    @staticmethod
    async def _show_user_details_by_username(update: Update, context: ContextTypes.DEFAULT_TYPE, username: str):
        """Show user details by username"""
        with db_manager.get_session() as session:
            user = session.query(User).filter(User.username == username).first()
            
            if not user:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            await AdminPanelHandler._display_user_details(update, context, user)
    
    @staticmethod
    async def _display_user_details(update: Update, context: ContextTypes.DEFAULT_TYPE, user):
        """Display detailed user information"""
        with db_manager.get_session() as session:
            # Get user's posts count
            posts_count = session.query(Post).filter(Post.user_id == user.id).count()
            active_posts = session.query(Post).filter(
                and_(Post.user_id == user.id, Post.is_active == True)
            ).count()
            
            # Get user's transaction count as seller and buyer
            seller_transactions = session.query(Transaction).filter(Transaction.seller_id == user.id).count()
            buyer_transactions = session.query(Transaction).filter(Transaction.buyer_id == user.id).count()
            
            # Get recent admin actions
            recent_actions = session.query(AdminAction).filter(
                AdminAction.target_user_id == user.id
            ).order_by(AdminAction.created_at.desc()).limit(3).all()
            
            # Status info
            status_emoji = {
                UserStatus.ACTIVE: "‚úÖ",
                UserStatus.SUSPICIOUS: "‚ö†Ô∏è",
                UserStatus.BANNED: "üö´"
            }
            
            user_info = f"""
üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ

üÜî ID: {user.telegram_id}
üë§ –ò–º—è: {user.first_name} {user.last_name or ''}
üì± Username: @{user.username or '–Ω–µ—Ç'}
üè∑ –ù–∏–∫: {user.nickname or '–Ω–µ—Ç'}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone or '–Ω–µ—Ç'}

üìä –°—Ç–∞—Ç—É—Å: {status_emoji.get(user.status, '‚ùì')} {user.status.value}
‚≠ê –†–µ–π—Ç–∏–Ω–≥: {user.average_rating:.1f}/5.0
üèÜ –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ–¥–∞–≤–µ—Ü: {'‚úÖ' if user.is_verified_seller else '‚ùå'}

üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {user.total_transactions}
‚Ä¢ –ö–∞–∫ –ø—Ä–æ–¥–∞–≤–µ—Ü: {seller_transactions}
‚Ä¢ –ö–∞–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å: {buyer_transactions}
‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {user.total_amount:.2f} –≥—Ä–Ω
‚Ä¢ –û–±—ä—è–≤–ª–µ–Ω–∏–π: {posts_count} (–∞–∫—Ç–∏–≤–Ω—ã—Ö: {active_posts})
‚Ä¢ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {user.warnings_count}

üìÖ –î–∞—Ç—ã:
‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.created_at.strftime('%d.%m.%Y %H:%M')}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user.last_activity.strftime('%d.%m.%Y %H:%M') if user.last_activity else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
            """
            
            if recent_actions:
                user_info += "\nüîß –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–æ–≤:\n"
                for action in recent_actions:
                    user_info += f"‚Ä¢ {action.action_type} - {action.created_at.strftime('%d.%m %H:%M')}\n"
            
            await update.message.reply_text(
                user_info,
                reply_markup=Keyboards.admin_user_actions(user.id)
            )
    
    @staticmethod
    async def _show_users_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show list of users with filters"""
        users_text = """
üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:
/users [telegram_id] - –ø–æ ID
/users @username - –ø–æ username

üìä –ë—ã—Å—Ç—Ä—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:
/users banned - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
/users suspicious - –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ
/users active - –∞–∫—Ç–∏–≤–Ω—ã–µ
/users top - —Ç–æ–ø –ø—Ä–æ–¥–∞–≤—Ü—ã
        """
        
        # Handle filter arguments
        if context.args and context.args[0] in ['banned', 'suspicious', 'active', 'top']:
            filter_type = context.args[0]
            await AdminPanelHandler._show_filtered_users(update, context, filter_type)
        else:
            await update.message.reply_text(users_text)
    
    @staticmethod
    async def _show_filtered_users(update: Update, context: ContextTypes.DEFAULT_TYPE, filter_type: str):
        """Show filtered list of users"""
        with db_manager.get_session() as session:
            if filter_type == 'banned':
                users = session.query(User).filter(User.status == UserStatus.BANNED).limit(20).all()
                title = "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:"
                
            elif filter_type == 'suspicious':
                users = session.query(User).filter(User.status == UserStatus.SUSPICIOUS).limit(20).all()
                title = "‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:"
                
            elif filter_type == 'active':
                users = session.query(User).filter(
                    and_(
                        User.status == UserStatus.ACTIVE,
                        User.last_activity >= datetime.now() - timedelta(days=7)
                    )
                ).order_by(User.last_activity.desc()).limit(20).all()
                title = "‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–∑–∞ –Ω–µ–¥–µ–ª—é):"
                
            elif filter_type == 'top':
                users = session.query(User).filter(
                    User.total_transactions > 0
                ).order_by(User.total_transactions.desc()).limit(20).all()
                title = "üèÜ –¢–æ–ø –ø—Ä–æ–¥–∞–≤—Ü—ã:"
            
            if not users:
                await update.message.reply_text(f"üë• {title}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return
            
            user_list = f"üë• {title}\n\n"
            
            for user in users:
                status_emoji = {
                    UserStatus.ACTIVE: "‚úÖ",
                    UserStatus.SUSPICIOUS: "‚ö†Ô∏è",
                    UserStatus.BANNED: "üö´"
                }
                
                username = f"@{user.username}" if user.username else "–Ω–µ—Ç"
                user_list += f"{status_emoji.get(user.status, '‚ùì')} {user.first_name} ({username})\n"
                user_list += f"   üÜî {user.telegram_id} | ü§ù {user.total_transactions} —Å–¥–µ–ª–æ–∫\n\n"
            
            await update.message.reply_text(user_list)
    
    @staticmethod
    async def handle_admin_user_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle admin actions on users"""
        query = update.callback_query
        await query.answer()
        
        if not Config.is_admin(query.from_user.id):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        if query.data.startswith("admin_ban_"):
            user_id = int(query.data.split("_")[2])
            await AdminPanelHandler._ban_user(query, context, user_id)
            
        elif query.data.startswith("admin_unban_"):
            user_id = int(query.data.split("_")[2])
            await AdminPanelHandler._unban_user(query, context, user_id)
            
        elif query.data.startswith("admin_suspicious_"):
            user_id = int(query.data.split("_")[2])
            await AdminPanelHandler._mark_suspicious(query, context, user_id)
            
        elif query.data.startswith("admin_balance_"):
            user_id = int(query.data.split("_")[2])
            await AdminPanelHandler._change_balance(query, context, user_id)
            
        elif query.data.startswith("admin_stats_"):
            user_id = int(query.data.split("_")[2])
            await AdminPanelHandler._show_user_stats(query, context, user_id)
    
    @staticmethod
    async def _ban_user(query, context, user_id: int):
        """Ban a user"""
        with db_manager.get_session() as session:
            user = session.query(User).filter(User.id == user_id).first()
            
            if user:
                user.status = UserStatus.BANNED
                
                # Log admin action
                admin_action = AdminAction(
                    admin_id=query.from_user.id,
                    target_user_id=user_id,
                    action_type='ban_user',
                    reason='–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'
                )
                session.add(admin_action)
                
                await query.edit_message_text(
                    f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω."
                )
                
                # Notify user
                try:
                    await context.bot.send_message(
                        chat_id=user.telegram_id,
                        text="üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n"
                             "–î–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
                    )
                except Exception as e:
                    logger.error(f"Failed to notify banned user: {e}")
    
    @staticmethod
    async def _unban_user(query, context, user_id: int):
        """Unban a user"""
        with db_manager.get_session() as session:
            user = session.query(User).filter(User.id == user_id).first()
            
            if user:
                user.status = UserStatus.ACTIVE
                user.warnings_count = 0  # Reset warnings
                
                # Log admin action
                admin_action = AdminAction(
                    admin_id=query.from_user.id,
                    target_user_id=user_id,
                    action_type='unban_user',
                    reason='–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'
                )
                session.add(admin_action)
                
                await query.edit_message_text(
                    f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω."
                )
                
                # Notify user
                try:
                    await context.bot.send_message(
                        chat_id=user.telegram_id,
                        text="‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!\n\n"
                             "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞."
                    )
                except Exception as e:
                    logger.error(f"Failed to notify unbanned user: {e}")
    
    @staticmethod
    async def _mark_suspicious(query, context, user_id: int):
        """Mark user as suspicious"""
        with db_manager.get_session() as session:
            user = session.query(User).filter(User.id == user_id).first()
            
            if user:
                user.status = UserStatus.SUSPICIOUS
                
                # Log admin action
                admin_action = AdminAction(
                    admin_id=query.from_user.id,
                    target_user_id=user_id,
                    action_type='mark_suspicious',
                    reason='–ü–æ–º–µ—á–µ–Ω –∫–∞–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π'
                )
                session.add(admin_action)
                
                await query.edit_message_text(
                    f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π."
                )
    
    @staticmethod
    async def _change_balance(query, context, user_id: int):
        """Request balance change for user"""
        await query.edit_message_text(
            "üí∞ –§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞\n\n"
            "–í –¥–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –±–æ—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã.\n"
            "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
    
    @staticmethod
    async def _show_user_stats(query, context, user_id: int):
        """Show detailed user statistics"""
        with db_manager.get_session() as session:
            user = session.query(User).filter(User.id == user_id).first()
            
            if not user:
                await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            # Get detailed statistics
            today = datetime.now().date()
            week_ago = today - timedelta(days=7)
            month_ago = today - timedelta(days=30)
            
            # Transaction stats
            total_as_seller = session.query(Transaction).filter(Transaction.seller_id == user_id).count()
            total_as_buyer = session.query(Transaction).filter(Transaction.buyer_id == user_id).count()
            
            completed_as_seller = session.query(Transaction).filter(
                and_(Transaction.seller_id == user_id, Transaction.status == TransactionStatus.COMPLETED)
            ).count()
            
            # Revenue generated
            revenue_generated = session.query(func.sum(Transaction.commission)).filter(
                and_(Transaction.seller_id == user_id, Transaction.status == TransactionStatus.COMPLETED)
            ).scalar() or 0
            
            # Recent activity
            recent_posts = session.query(Post).filter(
                and_(Post.user_id == user_id, Post.created_at >= week_ago)
            ).count()
            
            recent_transactions = session.query(Transaction).filter(
                and_(
                    (Transaction.seller_id == user_id) | (Transaction.buyer_id == user_id),
                    Transaction.created_at >= week_ago
                )
            ).count()
            
            stats_text = f"""
üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
üë§ {user.first_name}

ü§ù –°–î–ï–õ–ö–ò:
‚Ä¢ –ö–∞–∫ –ø—Ä–æ–¥–∞–≤–µ—Ü: {total_as_seller}
‚Ä¢ –ö–∞–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å: {total_as_buyer}
‚Ä¢ –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {completed_as_seller}
‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(completed_as_seller/total_as_seller*100) if total_as_seller > 0 else 0:.1f}%

üí∞ –î–û–•–û–î –ü–õ–ê–¢–§–û–†–ú–ï:
‚Ä¢ –ö–æ–º–∏—Å—Å–∏–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {revenue_generated:.2f} –≥—Ä–Ω

üìà –ê–ö–¢–ò–í–ù–û–°–¢–¨ (–Ω–µ–¥–µ–ª—è):
‚Ä¢ –ù–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {recent_posts}
‚Ä¢ –ù–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫: {recent_transactions}

‚ö†Ô∏è –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨:
‚Ä¢ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {user.warnings_count}
‚Ä¢ –°—Ç–∞—Ç—É—Å: {user.status.value}
            """
            
            await query.edit_message_text(stats_text)
    
    @staticmethod
    async def admin_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Broadcast message to all users"""
        user_id = update.effective_user.id
        
        if not Config.is_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        if not context.args:
            await update.message.reply_text(
                "üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast [—Å–æ–æ–±—â–µ–Ω–∏–µ]\n\n"
                "–°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞."
            )
            return
        
        message_text = " ".join(context.args)
        
        with db_manager.get_session() as session:
            # Get all active users
            users = session.query(User).filter(User.status == UserStatus.ACTIVE).all()
            
            sent_count = 0
            failed_count = 0
            
            for user in users:
                try:
                    await context.bot.send_message(
                        chat_id=user.telegram_id,
                        text=f"üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n\n{message_text}"
                    )
                    sent_count += 1
                except Exception as e:
                    failed_count += 1
                    logger.error(f"Failed to send broadcast to {user.telegram_id}: {e}")
            
            # Log admin action
            admin_action = AdminAction(
                admin_id=user_id,
                action_type='broadcast',
                reason=f'–†–∞—Å—Å—ã–ª–∫–∞: {message_text[:100]}...',
                details=json.dumps({
                    'sent': sent_count,
                    'failed': failed_count,
                    'message': message_text
                })
            )
            session.add(admin_action)
        
        await update.message.reply_text(
            f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
            f"‚ùå –û—à–∏–±–∫–∏: {failed_count}"
        )
    
    @staticmethod
    async def admin_transactions(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Manage transactions"""
        user_id = update.effective_user.id
        
        if not Config.is_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        with db_manager.get_session() as session:
            if context.args and context.args[0] == 'pending':
                # Show pending transactions
                pending_transactions = session.query(Transaction).filter(
                    Transaction.status.in_([
                        TransactionStatus.VERIFICATION_PENDING,
                        TransactionStatus.PAYMENT_PENDING,
                        TransactionStatus.COMPLETED
                    ])
                ).order_by(Transaction.created_at.desc()).limit(10).all()
                
                if not pending_transactions:
                    await update.message.reply_text("üìã –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.")
                    return
                
                transactions_text = "üìã –û–∂–∏–¥–∞—é—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:\n\n"
                
                for transaction in pending_transactions:
                    seller = session.query(User).filter(User.id == transaction.seller_id).first()
                    buyer = session.query(User).filter(User.id == transaction.buyer_id).first()
                    
                    status_emoji = {
                        TransactionStatus.VERIFICATION_PENDING: "üé•",
                        TransactionStatus.PAYMENT_PENDING: "üí∞",
                        TransactionStatus.COMPLETED: "‚úÖ"
                    }
                    
                    transactions_text += f"{status_emoji.get(transaction.status, '‚ùì')} ID: {transaction.id}\n"
                    transactions_text += f"üí∞ {transaction.amount} –≥—Ä–Ω\n"
                    transactions_text += f"üë§ {seller.first_name} ‚Üí {buyer.first_name}\n"
                    transactions_text += f"üìÖ {transaction.created_at.strftime('%d.%m %H:%M')}\n\n"
                
                await update.message.reply_text(transactions_text)
            
            else:
                # Show transaction statistics
                total_transactions = session.query(Transaction).count()
                pending_verification = session.query(Transaction).filter(
                    Transaction.status == TransactionStatus.VERIFICATION_PENDING
                ).count()
                pending_payment = session.query(Transaction).filter(
                    Transaction.status == TransactionStatus.PAYMENT_PENDING
                ).count()
                awaiting_approval = session.query(Transaction).filter(
                    Transaction.status == TransactionStatus.COMPLETED
                ).count()
                
                transactions_info = f"""
ü§ù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∞–º–∏

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {total_transactions}
‚Ä¢ –û–∂–∏–¥–∞—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: {pending_verification}
‚Ä¢ –û–∂–∏–¥–∞—é—Ç –æ–ø–ª–∞—Ç—ã: {pending_payment}
‚Ä¢ –û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {awaiting_approval}

üîß –ö–æ–º–∞–Ω–¥—ã:
/transactions pending - –ø–æ–∫–∞–∑–∞—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ
/transactions [ID] - –¥–µ—Ç–∞–ª–∏ —Å–¥–µ–ª–∫–∏
                """
                
                await update.message.reply_text(transactions_info)
    
    @staticmethod
    async def admin_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show and modify bot settings"""
        user_id = update.effective_user.id
        
        if not Config.is_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        settings_text = f"""
‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞

üí∞ –¶–ï–ù–´:
‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Å—Ç–∞: {Config.POST_PRICE} –≥—Ä–Ω
‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è: {Config.PIN_PRICE} –≥—Ä–Ω
‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–ª–µ–Ω–∏—è: {Config.EXTEND_PRICE} –≥—Ä–Ω
‚Ä¢ –ö–æ–º–∏—Å—Å–∏—è —ç—Å–∫—Ä–æ—É: {Config.ESCROW_COMMISSION*100}%

‚è∞ –í–†–ï–ú–ï–ù–ù–´–ï –õ–ò–ú–ò–¢–´:
‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ—Å—Ç–∞: {Config.POST_DURATION_HOURS} —á–∞—Å–æ–≤
‚Ä¢ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏: {Config.WARNING_HOURS} —á–∞—Å–æ–≤
‚Ä¢ –¢–∞–π–º–∞—É—Ç —Å–¥–µ–ª–∫–∏: {Config.TRANSACTION_TIMEOUT_HOURS} —á–∞—Å–æ–≤

üõ° –ê–ù–¢–ò–°–ü–ê–ú:
‚Ä¢ –ú–∞–∫—Å. –æ—Ç–º–µ–Ω –≤ –¥–µ–Ω—å: {Config.MAX_DAILY_CANCELLATIONS}
‚Ä¢ –ú–∏–Ω. —Å—É–º–º–∞ —Å–¥–µ–ª–∫–∏: {Config.MIN_TRANSACTION_AMOUNT} –≥—Ä–Ω

üìä –§–ê–ô–õ–´:
‚Ä¢ –ú–∞–∫—Å. —Ñ–æ—Ç–æ: {Config.MAX_PHOTOS}
‚Ä¢ –ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {Config.MAX_FILE_SIZE // (1024*1024)} MB

–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.
        """
        
        await update.message.reply_text(settings_text)
    
    @staticmethod
    async def update_daily_statistics(session):
        """Update daily statistics (called by scheduler)"""
        today = datetime.now().date()
        
        # Check if today's stats already exist
        existing_stats = session.query(BotStatistics).filter(
            func.date(BotStatistics.date) == today
        ).first()
        
        if existing_stats:
            return  # Already updated today
        
        # Calculate today's statistics
        yesterday = today - timedelta(days=1)
        
        new_users = session.query(User).filter(
            func.date(User.created_at) == yesterday
        ).count()
        
        active_users = session.query(User).filter(
            and_(
                User.last_activity >= yesterday,
                User.last_activity < today
            )
        ).count()
        
        new_posts = session.query(Post).filter(
            func.date(Post.created_at) == yesterday
        ).count()
        
        completed_transactions = session.query(Transaction).filter(
            and_(
                func.date(Transaction.completed_at) == yesterday,
                Transaction.status == TransactionStatus.COMPLETED
            )
        ).count()
        
        cancelled_transactions = session.query(Transaction).filter(
            and_(
                func.date(Transaction.created_at) == yesterday,
                Transaction.status == TransactionStatus.CANCELLED
            )
        ).count()
        
        transaction_volume = session.query(func.sum(Transaction.amount)).filter(
            and_(
                func.date(Transaction.completed_at) == yesterday,
                Transaction.status == TransactionStatus.COMPLETED
            )
        ).scalar() or 0
        
        commission_earned = session.query(func.sum(Transaction.commission)).filter(
            and_(
                func.date(Transaction.completed_at) == yesterday,
                Transaction.status == TransactionStatus.COMPLETED
            )
        ).scalar() or 0
        
        post_revenue = new_posts * Config.POST_PRICE
        
        # Create statistics record
        daily_stats = BotStatistics(
            date=yesterday,
            new_users=new_users,
            active_users=active_users,
            new_posts=new_posts,
            completed_transactions=completed_transactions,
            cancelled_transactions=cancelled_transactions,
            total_transaction_volume=transaction_volume,
            commission_earned=commission_earned,
            post_revenue=post_revenue
        )
        
        session.add(daily_stats)
        session.commit()
        
        logger.info(f"Daily statistics updated for {yesterday}")
    
    @staticmethod
    async def generate_daily_report(context: ContextTypes.DEFAULT_TYPE):
        """Generate and send daily report to admins"""
        with db_manager.get_session() as session:
            yesterday = datetime.now().date() - timedelta(days=1)
            
            stats = session.query(BotStatistics).filter(
                func.date(BotStatistics.date) == yesterday
            ).first()
            
            if not stats:
                return
            
            report_text = f"""
üìä –î–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç –∑–∞ {yesterday.strftime('%d.%m.%Y')}

üë• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:
‚Ä¢ –ù–æ–≤—ã—Ö: {stats.new_users}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats.active_users}

üìù –û–ë–™–Ø–í–õ–ï–ù–ò–Ø:
‚Ä¢ –ù–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤: {stats.new_posts}
‚Ä¢ –î–æ—Ö–æ–¥ –æ—Ç –ø–æ—Å—Ç–æ–≤: {stats.post_revenue:.2f} –≥—Ä–Ω

ü§ù –°–î–ï–õ–ö–ò:
‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {stats.completed_transactions}
‚Ä¢ –û—Ç–º–µ–Ω–µ–Ω–æ: {stats.cancelled_transactions}
‚Ä¢ –û–±—ä–µ–º —Å–¥–µ–ª–æ–∫: {stats.total_transaction_volume:.2f} –≥—Ä–Ω
‚Ä¢ –ö–æ–º–∏—Å—Å–∏–π –ø–æ–ª—É—á–µ–Ω–æ: {stats.commission_earned:.2f} –≥—Ä–Ω

üí∞ –û–ë–©–ò–ô –î–û–•–û–î: {(stats.commission_earned + stats.post_revenue):.2f} –≥—Ä–Ω
            """
            
            # Send to all admins
            for admin_id in Config.ADMIN_IDS:
                try:
                    await context.bot.send_message(
                        chat_id=admin_id,
                        text=report_text
                    )
                except Exception as e:
                    logger.error(f"Failed to send daily report to admin {admin_id}: {e}")