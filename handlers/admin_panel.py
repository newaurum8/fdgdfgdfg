from telegram import Update
from telegram.ext import ContextTypes, CallbackQueryHandler, MessageHandler, filters, ConversationHandler
from utils.keyboards import Keyboards
from database.database import db_manager
from database.models import (User, Post, Transaction, Chat, BotStatistics, 
                           AdminAction, UserStatus, TransactionStatus)
from config import Config
import logging
from datetime import datetime, timedelta
from sqlalchemy import func, and_
import json

logger = logging.getLogger(__name__)

# Admin conversation states
(ADMIN_FIND_USER, ADMIN_BROADCAST_MESSAGE, ADMIN_MESSAGE_USER, 
 ADMIN_FIND_TRANSACTION) = range(4)

class AdminPanelHandler:
    
    @staticmethod
    async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Main admin command - show admin panel"""
        user_id = update.effective_user.id
        
        if not Config.is_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        # Get quick stats
        with db_manager.get_session() as session:
            total_users = session.query(User).count()
            active_transactions = session.query(Transaction).filter(
                Transaction.status.in_([TransactionStatus.PENDING, TransactionStatus.IN_PROGRESS])
            ).count()
            today_posts = session.query(Post).filter(
                func.date(Post.created_at) == datetime.now().date()
            ).count()
        
        admin_text = f"""
üîß **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å**

üìä **–ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: **{total_users}**
ü§ù –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: **{active_transactions}**
üìù –ü–æ—Å—Ç–æ–≤ —Å–µ–≥–æ–¥–Ω—è: **{today_posts}**

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
        """
        
        await update.message.reply_text(
            admin_text,
            reply_markup=Keyboards.admin_main_panel(),
            parse_mode='Markdown'
        )
    
    @staticmethod
    async def handle_admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle admin panel callbacks"""
        query = update.callback_query
        await query.answer()
        
        if not Config.is_admin(query.from_user.id):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        data = query.data
        
        # Main menu handlers
        if data == "admin_stats":
            await AdminPanelHandler._show_stats_menu(query, context)
        elif data == "admin_users":
            await AdminPanelHandler._show_users_menu(query, context)
        elif data == "admin_transactions":
            await AdminPanelHandler._show_transactions_menu(query, context)
        elif data == "admin_broadcast":
            await AdminPanelHandler._show_broadcast_menu(query, context)
        elif data == "admin_settings":
            await AdminPanelHandler._show_settings_menu(query, context)
        elif data == "admin_reports":
            await AdminPanelHandler._show_reports_menu(query, context)
        elif data == "admin_back_main":
            await AdminPanelHandler._show_main_panel(query, context)
        
        # Stats handlers
        elif data.startswith("admin_stats_"):
            await AdminPanelHandler._handle_stats(query, context, data)
        
        # Users handlers
        elif data.startswith("admin_users_"):
            await AdminPanelHandler._handle_users(query, context, data)
        elif data == "admin_find_user":
            await AdminPanelHandler._start_user_search(query, context)
        
        # Transactions handlers
        elif data.startswith("admin_trans_"):
            await AdminPanelHandler._handle_transactions(query, context, data)
        elif data == "admin_find_transaction":
            await AdminPanelHandler._start_transaction_search(query, context)
        
        # Broadcast handlers
        elif data.startswith("admin_broadcast_"):
            await AdminPanelHandler._handle_broadcast(query, context, data)
        
        # User management handlers
        elif data.startswith("admin_ban_") or data.startswith("admin_unban_"):
            await AdminPanelHandler._handle_user_ban(query, context, data)
        elif data.startswith("admin_suspicious_") or data.startswith("admin_unsuspicious_"):
            await AdminPanelHandler._handle_user_suspicious(query, context, data)
        elif data.startswith("admin_user_stats_"):
            await AdminPanelHandler._show_user_detailed_stats(query, context, data)
        elif data.startswith("admin_message_"):
            await AdminPanelHandler._start_user_message(query, context, data)
        
        # Transaction management handlers
        elif data.startswith("admin_verify_"):
            await AdminPanelHandler._handle_verification(query, context, data)
        elif data.startswith("admin_payout_"):
            await AdminPanelHandler._handle_payout(query, context, data)
        elif data.startswith("admin_extend_time_"):
            await AdminPanelHandler._show_time_extend_options(query, context, data)
        elif data.startswith("admin_extend_") and data.count("_") >= 3:
            await AdminPanelHandler._handle_time_extension(query, context, data)
        
        # Pagination handlers
        elif data.startswith("admin_page_"):
            await AdminPanelHandler._handle_pagination(query, context, data)
    
    @staticmethod
    async def _show_main_panel(query, context):
        """Show main admin panel"""
        # Get quick stats
        with db_manager.get_session() as session:
            total_users = session.query(User).count()
            active_transactions = session.query(Transaction).filter(
                Transaction.status.in_([TransactionStatus.PENDING, TransactionStatus.IN_PROGRESS])
            ).count()
            today_posts = session.query(Post).filter(
                func.date(Post.created_at) == datetime.now().date()
            ).count()
        
        admin_text = f"""
üîß **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å**

üìä **–ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: **{total_users}**
ü§ù –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: **{active_transactions}**
üìù –ü–æ—Å—Ç–æ–≤ —Å–µ–≥–æ–¥–Ω—è: **{today_posts}**

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
        """
        
        await query.edit_message_text(
            admin_text,
            reply_markup=Keyboards.admin_main_panel(),
            parse_mode='Markdown'
        )
    
    @staticmethod
    async def _show_stats_menu(query, context):
        """Show statistics menu"""
        await query.edit_message_text(
            "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
            reply_markup=Keyboards.admin_stats_menu(),
            parse_mode='Markdown'
        )
    
    @staticmethod
    async def _show_users_menu(query, context):
        """Show users management menu"""
        await query.edit_message_text(
            "üë• **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=Keyboards.admin_users_menu(),
            parse_mode='Markdown'
        )
    
    @staticmethod
    async def _show_transactions_menu(query, context):
        """Show transactions management menu"""
        with db_manager.get_session() as session:
            pending_verification = session.query(Transaction).filter(
                Transaction.status == TransactionStatus.VERIFICATION_PENDING
            ).count()
            pending_payment = session.query(Transaction).filter(
                Transaction.status == TransactionStatus.PAYMENT_PENDING
            ).count()
            completed_pending = session.query(Transaction).filter(
                Transaction.status == TransactionStatus.COMPLETED
            ).count()
        
        text = f"""
ü§ù **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∞–º–∏**

üìä **–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:**
‚è≥ –û–∂–∏–¥–∞—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: **{pending_verification}**
üí∞ –û–∂–∏–¥–∞—é—Ç –æ–ø–ª–∞—Ç—ã: **{pending_payment}**
‚úÖ –û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: **{completed_pending}**

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
        """
        
        await query.edit_message_text(
            text,
            reply_markup=Keyboards.admin_transactions_menu(),
            parse_mode='Markdown'
        )
    
    @staticmethod
    async def _show_broadcast_menu(query, context):
        """Show broadcast menu"""
        await query.edit_message_text(
            "üì¢ **–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏—Ç–æ—Ä–∏—é:",
            reply_markup=Keyboards.admin_broadcast_menu(),
            parse_mode='Markdown'
        )
    
    @staticmethod
    async def _show_settings_menu(query, context):
        """Show settings menu"""
        settings_text = f"""
‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞**

üí∞ **–¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã:**
‚Ä¢ –ü–æ—Å—Ç: {Config.POST_PRICE} –≥—Ä–Ω
‚Ä¢ –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ: {Config.PIN_PRICE} –≥—Ä–Ω
‚Ä¢ –ü—Ä–æ–¥–ª–µ–Ω–∏–µ: {Config.EXTEND_PRICE} –≥—Ä–Ω
‚Ä¢ –ö–æ–º–∏—Å—Å–∏—è: {Config.ESCROW_COMMISSION*100}%

‚è∞ **–í—Ä–µ–º–µ–Ω–Ω—ã–µ –ª–∏–º–∏—Ç—ã:**
‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ—Å—Ç–∞: {Config.POST_DURATION_HOURS}—á
‚Ä¢ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {Config.WARNING_HOURS}—á
‚Ä¢ –¢–∞–π–º–∞—É—Ç —Å–¥–µ–ª–∫–∏: {Config.TRANSACTION_TIMEOUT_HOURS}—á

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:
        """
        
        await query.edit_message_text(
            settings_text,
            reply_markup=Keyboards.admin_settings_menu(),
            parse_mode='Markdown'
        )
    
    @staticmethod
    async def _show_reports_menu(query, context):
        """Show reports menu"""
        await query.edit_message_text(
            "üìà **–û—Ç—á—ë—Ç—ã**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á—ë—Ç–∞:",
            reply_markup=Keyboards.admin_reports_menu(),
            parse_mode='Markdown'
        )
    
    @staticmethod
    async def _handle_stats(query, context, data):
        """Handle statistics requests"""
        period = data.split("_")[-1]
        
        with db_manager.get_session() as session:
            today = datetime.now().date()
            
            if period == "today":
                start_date = today
                title = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"
            elif period == "week":
                start_date = today - timedelta(days=7)
                title = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é"
            elif period == "month":
                start_date = today - timedelta(days=30)
                title = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü"
            elif period == "all":
                start_date = None
                title = "–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
            elif period == "revenue":
                await AdminPanelHandler._show_revenue_stats(query, context)
                return
            
            # Calculate statistics
            if start_date:
                new_users = session.query(User).filter(User.created_at >= start_date).count()
                new_posts = session.query(Post).filter(Post.created_at >= start_date).count()
                completed_transactions = session.query(Transaction).filter(
                    and_(Transaction.completed_at >= start_date, Transaction.status == TransactionStatus.COMPLETED)
                ).count()
                revenue = session.query(func.sum(Transaction.commission)).filter(
                    and_(Transaction.completed_at >= start_date, Transaction.status == TransactionStatus.COMPLETED)
                ).scalar() or 0
            else:
                new_users = session.query(User).count()
                new_posts = session.query(Post).count()
                completed_transactions = session.query(Transaction).filter(
                    Transaction.status == TransactionStatus.COMPLETED
                ).count()
                revenue = session.query(func.sum(Transaction.commission)).filter(
                    Transaction.status == TransactionStatus.COMPLETED
                ).scalar() or 0
        
        stats_text = f"""
üìä **{title}**

üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:** {new_users}
üìù **–ü–æ—Å—Ç—ã:** {new_posts}
ü§ù **–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏:** {completed_transactions}
üí∞ **–î–æ—Ö–æ–¥:** {revenue:.2f} –≥—Ä–Ω

üìà **–°—Ä–µ–¥–Ω–∏–π —á–µ–∫:** {(revenue/completed_transactions):.2f} –≥—Ä–Ω (–µ—Å–ª–∏ –µ—Å—Ç—å —Å–¥–µ–ª–∫–∏)
        """
        
        await query.edit_message_text(
            stats_text,
            reply_markup=Keyboards.admin_stats_menu(),
            parse_mode='Markdown'
        )
    
    @staticmethod
    async def _show_revenue_stats(query, context):
        """Show detailed revenue statistics"""
        with db_manager.get_session() as session:
            today = datetime.now().date()
            
            # Revenue breakdown
            commission_revenue = session.query(func.sum(Transaction.commission)).filter(
                Transaction.status == TransactionStatus.COMPLETED
            ).scalar() or 0
            
            posts_revenue = session.query(Post).count() * Config.POST_PRICE
            
            # Today's revenue
            today_commission = session.query(func.sum(Transaction.commission)).filter(
                and_(
                    func.date(Transaction.completed_at) == today,
                    Transaction.status == TransactionStatus.COMPLETED
                )
            ).scalar() or 0
            
            today_posts = session.query(Post).filter(
                func.date(Post.created_at) == today
            ).count()
            today_posts_revenue = today_posts * Config.POST_PRICE
        
        revenue_text = f"""
üí∞ **–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Ö–æ–¥–æ–≤**

üéØ **–û–±—â–∏–π –¥–æ—Ö–æ–¥:**
‚Ä¢ –û—Ç –∫–æ–º–∏—Å—Å–∏–π: **{commission_revenue:.2f} –≥—Ä–Ω**
‚Ä¢ –û—Ç –ø–æ—Å—Ç–æ–≤: **{posts_revenue:.2f} –≥—Ä–Ω**
‚Ä¢ **–ò—Ç–æ–≥–æ: {commission_revenue + posts_revenue:.2f} –≥—Ä–Ω**

üìÖ **–°–µ–≥–æ–¥–Ω—è:**
‚Ä¢ –û—Ç –∫–æ–º–∏—Å—Å–∏–π: **{today_commission:.2f} –≥—Ä–Ω**
‚Ä¢ –û—Ç –ø–æ—Å—Ç–æ–≤: **{today_posts_revenue:.2f} –≥—Ä–Ω**
‚Ä¢ **–ò—Ç–æ–≥–æ: {today_commission + today_posts_revenue:.2f} –≥—Ä–Ω**

üìä **–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ—Ö–æ–¥–æ–≤:**
‚Ä¢ –ö–æ–º–∏—Å—Å–∏–∏: {(commission_revenue/(commission_revenue+posts_revenue)*100):.1f}%
‚Ä¢ –ü–æ—Å—Ç—ã: {(posts_revenue/(commission_revenue+posts_revenue)*100):.1f}%
        """
        
        await query.edit_message_text(
            revenue_text,
            reply_markup=Keyboards.admin_stats_menu(),
            parse_mode='Markdown'
        )
    
    @staticmethod
    async def _handle_users(query, context, data):
        """Handle user management requests"""
        filter_type = data.split("_")[-1]
        page = 0  # Default page
        
        with db_manager.get_session() as session:
            if filter_type == "banned":
                users = session.query(User).filter(User.status == UserStatus.BANNED).offset(page*10).limit(10).all()
                title = "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
            elif filter_type == "suspicious":
                users = session.query(User).filter(User.status == UserStatus.SUSPICIOUS).offset(page*10).limit(10).all()
                title = "‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
            elif filter_type == "active":
                users = session.query(User).filter(
                    and_(
                        User.status == UserStatus.ACTIVE,
                        User.last_activity >= datetime.now() - timedelta(days=7)
                    )
                ).order_by(User.last_activity.desc()).offset(page*10).limit(10).all()
                title = "‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–Ω–µ–¥–µ–ª—è)"
            elif filter_type == "top":
                users = session.query(User).filter(
                    User.total_transactions > 0
                ).order_by(User.total_transactions.desc()).offset(page*10).limit(10).all()
                title = "üèÜ –¢–æ–ø –ø—Ä–æ–¥–∞–≤—Ü—ã"
        
        if not users:
            await query.edit_message_text(
                f"{title}\n\n‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                reply_markup=Keyboards.admin_users_menu()
            )
            return
        
        user_list = f"{title}\n\n"
        
        for i, user in enumerate(users, 1):
            status_emoji = {
                UserStatus.ACTIVE: "‚úÖ",
                UserStatus.SUSPICIOUS: "‚ö†Ô∏è",
                UserStatus.BANNED: "üö´"
            }.get(user.status, "‚ùì")
            
            username = f"@{user.username}" if user.username else "–Ω–µ—Ç"
            user_list += f"{status_emoji} **{i}.** {user.first_name} ({username})\n"
            user_list += f"   üÜî `{user.telegram_id}` | ü§ù {user.total_transactions} —Å–¥–µ–ª–æ–∫\n\n"
        
        # Add pagination keyboard
        total_count = session.query(User).filter(
            User.status == (UserStatus.BANNED if filter_type == "banned" else 
                          UserStatus.SUSPICIOUS if filter_type == "suspicious" else UserStatus.ACTIVE)
        ).count()
        total_pages = (total_count + 9) // 10
        
        keyboard = Keyboards.admin_pagination(f"users_{filter_type}", page, total_pages) if total_pages > 1 else Keyboards.admin_users_menu()
        
        await query.edit_message_text(
            user_list,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
    
    @staticmethod
    async def _start_user_search(query, context):
        """Start user search conversation"""
        await query.edit_message_text(
            "üîç **–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ Telegram ID –∏–ª–∏ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
            parse_mode='Markdown'
        )
        return ADMIN_FIND_USER
    
    @staticmethod
    async def handle_user_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle user search input"""
        search_term = update.message.text.strip()
        
        with db_manager.get_session() as session:
            user = None
            
            if search_term.isdigit():
                # Search by Telegram ID
                user = session.query(User).filter(User.telegram_id == int(search_term)).first()
            elif search_term.startswith('@'):
                # Search by username
                username = search_term[1:]
                user = session.query(User).filter(User.username == username).first()
            
            if not user:
                await update.message.reply_text(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
                    reply_markup=Keyboards.admin_users_menu()
                )
                return ADMIN_FIND_USER
            
            # Show user details
            await AdminPanelHandler._show_user_details(update, context, user)
        
        return ConversationHandler.END
    
    @staticmethod
    async def _show_user_details(update, context, user):
        """Show detailed user information"""
        with db_manager.get_session() as session:
            # Get user's statistics
            posts_count = session.query(Post).filter(Post.user_id == user.id).count()
            active_posts = session.query(Post).filter(
                and_(Post.user_id == user.id, Post.is_active == True)
            ).count()
            
            seller_transactions = session.query(Transaction).filter(Transaction.seller_id == user.id).count()
            buyer_transactions = session.query(Transaction).filter(Transaction.buyer_id == user.id).count()
            
            # Recent admin actions
            recent_actions = session.query(AdminAction).filter(
                AdminAction.target_user_id == user.id
            ).order_by(AdminAction.created_at.desc()).limit(3).all()
            
            status_emoji = {
                UserStatus.ACTIVE: "‚úÖ",
                UserStatus.SUSPICIOUS: "‚ö†Ô∏è",
                UserStatus.BANNED: "üö´"
            }.get(user.status, "‚ùì")
            
            user_info = f"""
üë§ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ**

üÜî **ID:** `{user.telegram_id}`
üë§ **–ò–º—è:** {user.first_name} {user.last_name or ''}
üì± **Username:** @{user.username or '–Ω–µ—Ç'}
üè∑ **–ù–∏–∫:** {user.nickname or '–Ω–µ—Ç'}

üìä **–°—Ç–∞—Ç—É—Å:** {status_emoji} {user.status.value}
‚≠ê **–†–µ–π—Ç–∏–Ω–≥:** {user.average_rating:.1f}/5.0
üèÜ **–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π:** {'‚úÖ' if user.is_verified_seller else '‚ùå'}

üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: **{user.total_transactions}**
‚Ä¢ –ö–∞–∫ –ø—Ä–æ–¥–∞–≤–µ—Ü: **{seller_transactions}**
‚Ä¢ –ö–∞–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å: **{buyer_transactions}**
‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: **{user.total_amount:.2f} –≥—Ä–Ω**
‚Ä¢ –û–±—ä—è–≤–ª–µ–Ω–∏–π: **{posts_count}** (–∞–∫—Ç–∏–≤–Ω—ã—Ö: **{active_posts}**)
‚Ä¢ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: **{user.warnings_count}**

üìÖ **–î–∞—Ç—ã:**
‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.created_at.strftime('%d.%m.%Y %H:%M')}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user.last_activity.strftime('%d.%m.%Y %H:%M') if user.last_activity else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
            """
            
            if recent_actions:
                user_info += "\nüîß **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–æ–≤:**\n"
                for action in recent_actions:
                    user_info += f"‚Ä¢ {action.action_type} - {action.created_at.strftime('%d.%m %H:%M')}\n"
        
        keyboard = Keyboards.admin_user_management(user.id, user.status.value)
        
        if hasattr(update, 'message'):
            await update.message.reply_text(user_info, reply_markup=keyboard, parse_mode='Markdown')
        else:
            await update.edit_message_text(user_info, reply_markup=keyboard, parse_mode='Markdown')
    
    @staticmethod
    async def _handle_user_ban(query, context, data):
        """Handle user ban/unban"""
        action = "ban" if "ban_" in data and "unban_" not in data else "unban"
        user_id = int(data.split("_")[-1])
        
        with db_manager.get_session() as session:
            user = session.query(User).filter(User.id == user_id).first()
            
            if not user:
                await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            if action == "ban":
                user.status = UserStatus.BANNED
                message = f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω."
                
                # Notify user
                try:
                    await context.bot.send_message(
                        chat_id=user.telegram_id,
                        text="üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n"
                             "–î–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
                    )
                except Exception as e:
                    logger.error(f"Failed to notify banned user: {e}")
            else:
                user.status = UserStatus.ACTIVE
                user.warnings_count = 0
                message = f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω."
                
                # Notify user
                try:
                    await context.bot.send_message(
                        chat_id=user.telegram_id,
                        text="‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!\n\n"
                             "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞."
                    )
                except Exception as e:
                    logger.error(f"Failed to notify unbanned user: {e}")
            
            # Log admin action
            admin_action = AdminAction(
                admin_id=query.from_user.id,
                target_user_id=user_id,
                action_type=f'{action}_user',
                reason=f'{"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if action == "ban" else "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'
            )
            session.add(admin_action)
        
        await query.edit_message_text(
            message,
            reply_markup=Keyboards.admin_user_management(user_id, user.status.value)
        )
    
    @staticmethod
    async def _handle_user_suspicious(query, context, data):
        """Handle marking user as suspicious"""
        action = "suspicious" if "suspicious_" in data and "unsuspicious_" not in data else "unsuspicious"
        user_id = int(data.split("_")[-1])
        
        with db_manager.get_session() as session:
            user = session.query(User).filter(User.id == user_id).first()
            
            if not user:
                await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            if action == "suspicious":
                user.status = UserStatus.SUSPICIOUS
                message = f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π."
            else:
                user.status = UserStatus.ACTIVE
                message = f"‚úÖ –° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.first_name} —Å–Ω—è—Ç–∞ –ø–æ–º–µ—Ç–∫–∞ '–ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π'."
            
            # Log admin action
            admin_action = AdminAction(
                admin_id=query.from_user.id,
                target_user_id=user_id,
                action_type=f'mark_{action}',
                reason=f'{"–ü–æ–º–µ—á–µ–Ω –∫–∞–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π" if action == "suspicious" else "–°–Ω—è—Ç–∞ –ø–æ–º–µ—Ç–∫–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π"}'
            )
            session.add(admin_action)
        
        await query.edit_message_text(
            message,
            reply_markup=Keyboards.admin_user_management(user_id, user.status.value)
        )
    
    @staticmethod
    async def cancel_admin_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Cancel admin conversation"""
        await update.message.reply_text(
            "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=Keyboards.admin_main_panel()
        )
        return ConversationHandler.END
    
    # Additional admin methods for missing functionality
    @staticmethod
    async def _start_transaction_search(query, context):
        """Start transaction search conversation"""
        await query.edit_message_text(
            "üîç **–ü–æ–∏—Å–∫ —Å–¥–µ–ª–∫–∏**\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID —Å–¥–µ–ª–∫–∏:",
            parse_mode='Markdown'
        )
        return ADMIN_FIND_TRANSACTION
    
    @staticmethod
    async def handle_transaction_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle transaction search input"""
        try:
            transaction_id = int(update.message.text.strip())
            
            with db_manager.get_session() as session:
                transaction = session.query(Transaction).filter(Transaction.id == transaction_id).first()
                
                if not transaction:
                    await update.message.reply_text(
                        "‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
                    )
                    return ADMIN_FIND_TRANSACTION
                
                # Show transaction details
                await AdminPanelHandler._show_transaction_details(update, context, transaction)
            
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —Å–¥–µ–ª–∫–∏.\n\n"
                "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID —Å–¥–µ–ª–∫–∏:"
            )
            return ADMIN_FIND_TRANSACTION
        
        return ConversationHandler.END
    
    @staticmethod
    async def _show_transaction_details(update, context, transaction):
        """Show detailed transaction information"""
        with db_manager.get_session() as session:
            seller = session.query(User).filter(User.id == transaction.seller_id).first()
            buyer = session.query(User).filter(User.id == transaction.buyer_id).first()
            
            status_emoji = {
                TransactionStatus.PENDING: "‚è≥",
                TransactionStatus.PAYMENT_PENDING: "üí∞",
                TransactionStatus.VERIFICATION_PENDING: "üé•",
                TransactionStatus.IN_PROGRESS: "ü§ù",
                TransactionStatus.COMPLETED: "‚úÖ",
                TransactionStatus.CANCELLED: "‚ùå",
                TransactionStatus.DISPUTED: "‚öñÔ∏è"
            }.get(transaction.status, "‚ùì")
            
            transaction_info = f"""
ü§ù **–î–µ—Ç–∞–ª–∏ —Å–¥–µ–ª–∫–∏ #{transaction.id}**

üìä **–°—Ç–∞—Ç—É—Å:** {status_emoji} {transaction.status.value}
üí∞ **–°—É–º–º–∞:** {transaction.amount:.2f} –≥—Ä–Ω
üè¶ **–ö–æ–º–∏—Å—Å–∏—è:** {transaction.commission:.2f} –≥—Ä–Ω
üë§ **–ü–ª–∞—Ç–µ–ª—å—â–∏–∫ –∫–æ–º–∏—Å—Å–∏–∏:** {transaction.commission_payer}

üë• **–£—á–∞—Å—Ç–Ω–∏–∫–∏:**
‚Ä¢ **–ü—Ä–æ–¥–∞–≤–µ—Ü:** {seller.first_name} (@{seller.username or '–Ω–µ—Ç'})
‚Ä¢ **–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:** {buyer.first_name} (@{buyer.username or '–Ω–µ—Ç'})

üí≥ **–û–ø–ª–∞—Ç–∞:**
‚Ä¢ **–ú–µ—Ç–æ–¥:** {transaction.payment_method}
‚Ä¢ **–ü—Ä–æ–≤–µ—Ä–µ–Ω:** {'‚úÖ' if transaction.is_verified else '‚ùå'}

üìÖ **–î–∞—Ç—ã:**
‚Ä¢ **–°–æ–∑–¥–∞–Ω–∞:** {transaction.created_at.strftime('%d.%m.%Y %H:%M')}
‚Ä¢ **–î–µ–¥–ª–∞–π–Ω –æ–ø–ª–∞—Ç—ã:** {transaction.payment_deadline.strftime('%d.%m.%Y %H:%M') if transaction.payment_deadline else '–Ω–µ—Ç'}
‚Ä¢ **–î–µ–¥–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:** {transaction.completion_deadline.strftime('%d.%m.%Y %H:%M') if transaction.completion_deadline else '–Ω–µ—Ç'}
‚Ä¢ **–ó–∞–≤–µ—Ä—à–µ–Ω–∞:** {transaction.completed_at.strftime('%d.%m.%Y %H:%M') if transaction.completed_at else '–Ω–µ—Ç'}
            """
            
            keyboard = Keyboards.admin_transaction_management(transaction.id, transaction.status.value)
            
            if hasattr(update, 'message'):
                await update.message.reply_text(transaction_info, reply_markup=keyboard, parse_mode='Markdown')
            else:
                await update.edit_message_text(transaction_info, reply_markup=keyboard, parse_mode='Markdown')
    
    @staticmethod
    async def _handle_transactions(query, context, data):
        """Handle transaction management requests"""
        filter_type = data.split("_")[-1]
        
        with db_manager.get_session() as session:
            if filter_type == "pending":
                transactions = session.query(Transaction).filter(
                    Transaction.status == TransactionStatus.VERIFICATION_PENDING
                ).order_by(Transaction.created_at.desc()).limit(10).all()
                title = "‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏"
            elif filter_type == "payment":
                transactions = session.query(Transaction).filter(
                    Transaction.status == TransactionStatus.PAYMENT_PENDING
                ).order_by(Transaction.created_at.desc()).limit(10).all()
                title = "üí∞ –û–∂–∏–¥–∞—é—â–∏–µ –æ–ø–ª–∞—Ç—ã"
            elif filter_type == "completed":
                transactions = session.query(Transaction).filter(
                    Transaction.status == TransactionStatus.COMPLETED
                ).order_by(Transaction.completed_at.desc()).limit(10).all()
                title = "‚úÖ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ"
            elif filter_type == "cancelled":
                transactions = session.query(Transaction).filter(
                    Transaction.status == TransactionStatus.CANCELLED
                ).order_by(Transaction.created_at.desc()).limit(10).all()
                title = "‚ùå –û—Ç–º–µ–Ω—ë–Ω–Ω—ã–µ"
        
        if not transactions:
            await query.edit_message_text(
                f"{title}\n\n‚ùå –°–¥–µ–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                reply_markup=Keyboards.admin_transactions_menu()
            )
            return
        
        transactions_text = f"{title}\n\n"
        
        for i, transaction in enumerate(transactions, 1):
            seller = session.query(User).filter(User.id == transaction.seller_id).first()
            buyer = session.query(User).filter(User.id == transaction.buyer_id).first()
            
            transactions_text += f"**{i}.** ID: {transaction.id}\n"
            transactions_text += f"üí∞ {transaction.amount:.2f} –≥—Ä–Ω\n"
            transactions_text += f"üë§ {seller.first_name} ‚Üí {buyer.first_name}\n"
            transactions_text += f"üìÖ {transaction.created_at.strftime('%d.%m %H:%M')}\n\n"
        
        await query.edit_message_text(
            transactions_text,
            reply_markup=Keyboards.admin_transactions_menu(),
            parse_mode='Markdown'
        )
    
    @staticmethod
    async def _handle_broadcast(query, context, data):
        """Handle broadcast requests"""
        broadcast_type = data.split("_")[-1]
        
        await query.edit_message_text(
            f"üì¢ **–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è**\n\n"
            f"–ê—É–¥–∏—Ç–æ—Ä–∏—è: {broadcast_type}\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
            parse_mode='Markdown'
        )
        
        context.user_data['broadcast_type'] = broadcast_type
        return ADMIN_BROADCAST_MESSAGE
    
    @staticmethod
    async def handle_broadcast_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle broadcast message input"""
        message_text = update.message.text
        broadcast_type = context.user_data.get('broadcast_type', 'all')
        
        with db_manager.get_session() as session:
            # Get target users based on broadcast type
            if broadcast_type == "all":
                users = session.query(User).all()
                target_desc = "–≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
            elif broadcast_type == "active":
                users = session.query(User).filter(
                    User.status == UserStatus.ACTIVE,
                    User.last_activity >= datetime.now() - timedelta(days=7)
                ).all()
                target_desc = "–∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
            elif broadcast_type == "sellers":
                users = session.query(User).filter(
                    User.total_transactions > 0
                ).order_by(User.total_transactions.desc()).limit(100).all()
                target_desc = "—Ç–æ–ø –ø—Ä–æ–¥–∞–≤—Ü–∞–º"
            else:
                users = session.query(User).filter(User.status == UserStatus.ACTIVE).all()
                target_desc = "–∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
            
            sent_count = 0
            failed_count = 0
            
            status_message = await update.message.reply_text(
                f"üì¢ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É {target_desc}...\n"
                f"–í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(users)}"
            )
            
            for user in users:
                try:
                    await context.bot.send_message(
                        chat_id=user.telegram_id,
                        text=f"üì¢ **–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:**\n\n{message_text}",
                        parse_mode='Markdown'
                    )
                    sent_count += 1
                except Exception as e:
                    failed_count += 1
                    logger.error(f"Failed to send broadcast to {user.telegram_id}: {e}")
            
            # Log admin action
            admin_action = AdminAction(
                admin_id=update.effective_user.id,
                action_type='broadcast',
                reason=f'–†–∞—Å—Å—ã–ª–∫–∞ {target_desc}: {message_text[:50]}...',
                details=json.dumps({
                    'sent': sent_count,
                    'failed': failed_count,
                    'type': broadcast_type,
                    'message': message_text
                })
            )
            session.add(admin_action)
        
        await status_message.edit_text(
            f"üì¢ **–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
            f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: **{sent_count}**\n"
            f"‚ùå –û—à–∏–±–∫–∏: **{failed_count}**\n"
            f"üéØ –ê—É–¥–∏—Ç–æ—Ä–∏—è: {target_desc}",
            reply_markup=Keyboards.admin_main_panel(),
            parse_mode='Markdown'
        )
        
        return ConversationHandler.END
    
    @staticmethod
    async def _show_user_detailed_stats(query, context, data):
        """Show detailed user statistics"""
        user_id = int(data.split("_")[-1])
        
        with db_manager.get_session() as session:
            user = session.query(User).filter(User.id == user_id).first()
            
            if not user:
                await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            # Get detailed statistics
            today = datetime.now().date()
            week_ago = today - timedelta(days=7)
            month_ago = today - timedelta(days=30)
            
            # Transaction stats
            total_as_seller = session.query(Transaction).filter(Transaction.seller_id == user_id).count()
            total_as_buyer = session.query(Transaction).filter(Transaction.buyer_id == user_id).count()
            
            completed_as_seller = session.query(Transaction).filter(
                and_(Transaction.seller_id == user_id, Transaction.status == TransactionStatus.COMPLETED)
            ).count()
            
            # Revenue generated for platform
            revenue_generated = session.query(func.sum(Transaction.commission)).filter(
                and_(Transaction.seller_id == user_id, Transaction.status == TransactionStatus.COMPLETED)
            ).scalar() or 0
            
            # Recent activity
            recent_posts = session.query(Post).filter(
                and_(Post.user_id == user_id, Post.created_at >= week_ago)
            ).count()
            
            recent_transactions = session.query(Transaction).filter(
                and_(
                    (Transaction.seller_id == user_id) | (Transaction.buyer_id == user_id),
                    Transaction.created_at >= week_ago
                )
            ).count()
            
            stats_text = f"""
üìä **–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**
üë§ **{user.first_name}**

ü§ù **–°–î–ï–õ–ö–ò:**
‚Ä¢ –ö–∞–∫ –ø—Ä–æ–¥–∞–≤–µ—Ü: **{total_as_seller}**
‚Ä¢ –ö–∞–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å: **{total_as_buyer}**
‚Ä¢ –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: **{completed_as_seller}**
‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: **{(completed_as_seller/total_as_seller*100) if total_as_seller > 0 else 0:.1f}%**

üí∞ **–î–û–•–û–î –ü–õ–ê–¢–§–û–†–ú–ï:**
‚Ä¢ –ö–æ–º–∏—Å—Å–∏–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: **{revenue_generated:.2f} –≥—Ä–Ω**

üìà **–ê–ö–¢–ò–í–ù–û–°–¢–¨ (–Ω–µ–¥–µ–ª—è):**
‚Ä¢ –ù–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: **{recent_posts}**
‚Ä¢ –ù–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫: **{recent_transactions}**

‚ö†Ô∏è **–ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨:**
‚Ä¢ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: **{user.warnings_count}**
‚Ä¢ –°—Ç–∞—Ç—É—Å: **{user.status.value}**
            """
            
            await query.edit_message_text(
                stats_text,
                reply_markup=Keyboards.admin_user_management(user_id, user.status.value),
                parse_mode='Markdown'
            )
    
    @staticmethod
    async def _start_user_message(query, context, data):
        """Start sending message to user"""
        user_id = int(data.split("_")[-1])
        
        with db_manager.get_session() as session:
            user = session.query(User).filter(User.id == user_id).first()
            
            if not user:
                await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            await query.edit_message_text(
                f"üí¨ **–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é**\n\n"
                f"üë§ {user.first_name} (@{user.username or '–Ω–µ—Ç'})\n\n"
                "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:",
                parse_mode='Markdown'
            )
            
            context.user_data['message_target_user_id'] = user_id
            return ADMIN_MESSAGE_USER
    
    @staticmethod
    async def handle_user_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle admin message to user"""
        user_id = context.user_data.get('message_target_user_id')
        message_text = update.message.text
        
        if not user_id:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return ConversationHandler.END
        
        with db_manager.get_session() as session:
            user = session.query(User).filter(User.id == user_id).first()
            
            if not user:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return ConversationHandler.END
            
            try:
                await context.bot.send_message(
                    chat_id=user.telegram_id,
                    text=f"üì¨ **–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:**\n\n{message_text}",
                    parse_mode='Markdown'
                )
                
                # Log admin action
                admin_action = AdminAction(
                    admin_id=update.effective_user.id,
                    target_user_id=user_id,
                    action_type='send_message',
                    reason=f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_text[:50]}...'
                )
                session.add(admin_action)
                
                await update.message.reply_text(
                    f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.first_name}",
                    reply_markup=Keyboards.admin_main_panel()
                )
                
            except Exception as e:
                logger.error(f"Failed to send admin message to user {user.telegram_id}: {e}")
                await update.message.reply_text(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.first_name}.\n"
                    "–í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.",
                    reply_markup=Keyboards.admin_main_panel()
                )
        
        return ConversationHandler.END
    
    @staticmethod
    async def _handle_verification(query, context, data):
        """Handle verification approval/rejection"""
        action = data.split("_")[1]  # approve or reject
        transaction_id = int(data.split("_")[-1])
        
        with db_manager.get_session() as session:
            transaction = session.query(Transaction).filter(Transaction.id == transaction_id).first()
            
            if not transaction:
                await query.edit_message_text("‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return
            
            if action == "approve":
                transaction.status = TransactionStatus.IN_PROGRESS
                transaction.is_verified = True
                message = f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –¥–ª—è —Å–¥–µ–ª–∫–∏ #{transaction_id}"
                
                # Start transaction phase
                from handlers.escrow_system import EscrowHandler
                await EscrowHandler._start_transaction_phase(context, transaction)
                
            else:  # reject
                transaction.status = TransactionStatus.CANCELLED
                message = f"‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –¥–ª—è —Å–¥–µ–ª–∫–∏ #{transaction_id}"
                
                # Notify parties
                from handlers.escrow_system import EscrowHandler
                await EscrowHandler._notify_transaction_cancelled(
                    context, transaction, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞"
                )
            
            await query.edit_message_text(
                message,
                reply_markup=Keyboards.admin_transactions_menu()
            )
    
    @staticmethod
    async def _handle_payout(query, context, data):
        """Handle transaction payout"""
        transaction_id = int(data.split("_")[-1])
        
        with db_manager.get_session() as session:
            transaction = session.query(Transaction).filter(Transaction.id == transaction_id).first()
            
            if not transaction:
                await query.edit_message_text("‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return
            
            # Process payout
            from handlers.escrow_system import EscrowHandler
            await EscrowHandler._process_seller_payment(context, transaction)
            await EscrowHandler._start_rating_process(context, transaction)
            
            await query.edit_message_text(
                f"‚úÖ –í—ã–ø–ª–∞—Ç–∞ –ø–æ —Å–¥–µ–ª–∫–µ #{transaction_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!",
                reply_markup=Keyboards.admin_transactions_menu()
            )
    
    @staticmethod
    async def _show_time_extend_options(query, context, data):
        """Show time extension options"""
        transaction_id = int(data.split("_")[-1])
        
        await query.edit_message_text(
            f"‚è∞ **–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–¥–µ–ª–∫–∏ #{transaction_id}**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞ —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–¥–ª–∏—Ç—å:",
            reply_markup=Keyboards.admin_time_extend_options(transaction_id),
            parse_mode='Markdown'
        )
    
    @staticmethod
    async def _handle_time_extension(query, context, data):
        """Handle time extension"""
        parts = data.split("_")
        hours = int(parts[2][:-1])  # Remove 'h' suffix
        transaction_id = int(parts[3])
        
        with db_manager.get_session() as session:
            transaction = session.query(Transaction).filter(Transaction.id == transaction_id).first()
            
            if not transaction:
                await query.edit_message_text("‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return
            
            # Extend completion deadline
            if transaction.completion_deadline:
                transaction.completion_deadline += timedelta(hours=hours)
            else:
                transaction.completion_deadline = datetime.now() + timedelta(hours=hours)
            
            await query.edit_message_text(
                f"‚úÖ –í—Ä–µ–º—è —Å–¥–µ–ª–∫–∏ #{transaction_id} –ø—Ä–æ–¥–ª–µ–Ω–æ –Ω–∞ {hours} —á–∞—Å–æ–≤",
                reply_markup=Keyboards.admin_transactions_menu()
            )
    
    @staticmethod
    async def _handle_pagination(query, context, data):
        """Handle pagination for admin lists"""
        parts = data.split("_")
        data_type = parts[2]
        page = int(parts[3])
        
        # Redirect to appropriate handler with new page
        if data_type.startswith("users"):
            filter_type = data_type.split("_")[1] if "_" in data_type else "active"
            await AdminPanelHandler._handle_users(query, context, f"admin_users_{filter_type}")
        elif data_type.startswith("trans"):
            filter_type = data_type.split("_")[1] if "_" in data_type else "pending"
            await AdminPanelHandler._handle_transactions(query, context, f"admin_trans_{filter_type}")