from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler
from utils.keyboards import Keyboards
from database.database import db_manager
from database.models import Transaction, Chat, User, TransactionStatus
from config import Config
import random
import json
from datetime import datetime, timedelta
import logging

logger = logging.getLogger(__name__)

# Conversation states for escrow
(PRICE_CONFIRMATION, COMMISSION_SELECTION, PAYMENT_DETAILS, 
 PAYMENT_PROCESSING, VERIFICATION_VIDEO, TRANSACTION_PROGRESS,
 RATING_REVIEW) = range(7)

class EscrowHandler:
    
    @staticmethod
    async def initiate_transaction(query, context, chat_id: int):
        """Stage 1: Initiate transaction"""
        with db_manager.get_session() as session:
            chat = session.query(Chat).filter(Chat.id == chat_id).first()
            
            if not chat:
                await query.edit_message_text("‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return ConversationHandler.END
            
            # Check if post has a fixed price
            if chat.post.price and chat.post.price_type.value == "fixed":
                await query.edit_message_text(
                    f"ü§ù –ù–∞—á–∏–Ω–∞–µ–º —Å–¥–µ–ª–∫—É!\n\n"
                    f"üìù –¢–æ–≤–∞—Ä: {chat.post.title}\n"
                    f"üí∞ –¶–µ–Ω–∞: {chat.post.price} –≥—Ä–Ω\n\n"
                    f"–í—ã —Å–æ–≥–ª–∞—Å–Ω—ã —Å —ç—Ç–æ–π —Ü–µ–Ω–æ–π?",
                    reply_markup=Keyboards.yes_no(f"confirm_price_{chat_id}_{chat.post.price}", f"suggest_price_{chat_id}")
                )
            else:
                await query.edit_message_text(
                    f"ü§ù –ù–∞—á–∏–Ω–∞–µ–º —Å–¥–µ–ª–∫—É!\n\n"
                    f"üìù –¢–æ–≤–∞—Ä: {chat.post.title}\n"
                    f"üí∞ –¶–µ–Ω–∞: –¥–æ–≥–æ–≤–æ—Ä–Ω–∞—è\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Ü–µ–Ω—É –≤ –≥—Ä–∏–≤–Ω–∞—Ö:"
                )
                context.user_data['pending_chat_id'] = chat_id
                return PRICE_CONFIRMATION
    
    @staticmethod
    async def handle_price_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle price confirmation or input"""
        query = update.callback_query
        
        if query:
            await query.answer()
            
            if query.data.startswith("confirm_price_"):
                parts = query.data.split("_")
                chat_id = int(parts[2])
                price = float(parts[3])
                
                context.user_data['transaction_chat_id'] = chat_id
                context.user_data['transaction_price'] = price
                
                # Notify other party
                await EscrowHandler._notify_other_party_price(query, context, chat_id, price)
                return COMMISSION_SELECTION
                
            elif query.data.startswith("suggest_price_"):
                chat_id = int(query.data.split("_")[2])
                await query.edit_message_text(
                    "üí∞ –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Ü–µ–Ω—É –≤ –≥—Ä–∏–≤–Ω–∞—Ö:"
                )
                context.user_data['pending_chat_id'] = chat_id
                return PRICE_CONFIRMATION
                
            elif query.data.startswith("accept_price_"):
                parts = query.data.split("_")
                chat_id = int(parts[2])
                price = float(parts[3])
                
                context.user_data['transaction_chat_id'] = chat_id
                context.user_data['transaction_price'] = price
                
                await query.edit_message_text(
                    f"‚úÖ –¶–µ–Ω–∞ {price} –≥—Ä–Ω —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∞!\n\n"
                    "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã –∫–æ–º–∏—Å—Å–∏–∏."
                )
                
                await EscrowHandler._show_commission_options(query, context)
                return COMMISSION_SELECTION
                
            elif query.data.startswith("reject_price_"):
                await query.edit_message_text(
                    "‚ùå –¶–µ–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ —Å–≤–æ—é —Ü–µ–Ω—É:"
                )
                chat_id = int(query.data.split("_")[2])
                context.user_data['pending_chat_id'] = chat_id
                return PRICE_CONFIRMATION
        
        else:
            # Handle text input for price
            try:
                price = float(update.message.text)
                if price < Config.MIN_TRANSACTION_AMOUNT:
                    await update.message.reply_text(
                        f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å–¥–µ–ª–∫–∏: {Config.MIN_TRANSACTION_AMOUNT} –≥—Ä–Ω"
                    )
                    return PRICE_CONFIRMATION
                
                chat_id = context.user_data.get('pending_chat_id')
                if not chat_id:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–¥–µ–ª–∫—É –∑–∞–Ω–æ–≤–æ.")
                    return ConversationHandler.END
                
                context.user_data['transaction_price'] = price
                context.user_data['transaction_chat_id'] = chat_id
                
                # Notify other party about price proposal
                await EscrowHandler._notify_other_party_price(update, context, chat_id, price)
                return COMMISSION_SELECTION
                
            except ValueError:
                await update.message.reply_text(
                    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):"
                )
                return PRICE_CONFIRMATION
    
    @staticmethod
    async def _notify_other_party_price(update_or_query, context, chat_id: int, price: float):
        """Notify other party about price proposal"""
        with db_manager.get_session() as session:
            chat = session.query(Chat).filter(Chat.id == chat_id).first()
            
            current_user_id = update_or_query.from_user.id
            current_user = session.query(User).filter(User.telegram_id == current_user_id).first()
            
            # Determine other party
            other_user_id = chat.user1_id if chat.user2_id == current_user.id else chat.user2_id
            other_user = session.query(User).filter(User.id == other_user_id).first()
            
            if other_user:
                try:
                    notification = f"üí∞ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —Å–¥–µ–ª–∫–µ\n\n"
                    notification += f"üìù –¢–æ–≤–∞—Ä: {chat.post.title}\n"
                    notification += f"üíµ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞: {price} –≥—Ä–Ω\n"
                    notification += f"üë§ –û—Ç: {current_user.first_name}\n\n"
                    notification += "–ü—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —ç—Ç—É —Ü–µ–Ω—É?"
                    
                    await context.bot.send_message(
                        chat_id=other_user.telegram_id,
                        text=notification,
                        reply_markup=Keyboards.yes_no(
                            f"accept_price_{chat_id}_{price}",
                            f"reject_price_{chat_id}"
                        )
                    )
                except Exception as e:
                    logger.error(f"Failed to notify other party: {e}")
    
    @staticmethod
    async def _show_commission_options(query, context):
        """Stage 2: Show commission payment options"""
        price = context.user_data.get('transaction_price', 0)
        commission = price * Config.ESCROW_COMMISSION
        
        commission_text = f"üí≥ –ö–æ–º–∏—Å—Å–∏—è –∑–∞ –≥–∞—Ä–∞–Ω—Ç–∏—é: {commission:.2f} –≥—Ä–Ω ({Config.ESCROW_COMMISSION*100}%)\n\n"
        commission_text += "–ö—Ç–æ –±—É–¥–µ—Ç –æ–ø–ª–∞—á–∏–≤–∞—Ç—å –∫–æ–º–∏—Å—Å–∏—é?"
        
        await query.edit_message_text(
            commission_text,
            reply_markup=Keyboards.commission_split()
        )
    
    @staticmethod
    async def handle_commission_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle commission payment selection"""
        query = update.callback_query
        await query.answer()
        
        price = context.user_data.get('transaction_price', 0)
        commission = price * Config.ESCROW_COMMISSION
        
        if query.data == "commission_seller":
            context.user_data['commission_payer'] = 'seller'
            total_seller = price + commission
            await query.edit_message_text(
                f"‚úÖ –ü—Ä–æ–¥–∞–≤–µ—Ü –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç –∫–æ–º–∏—Å—Å–∏—é\n\n"
                f"üí∞ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –ø–ª–∞—Ç–∏—Ç: {price} –≥—Ä–Ω\n"
                f"üí≥ –ü—Ä–æ–¥–∞–≤–µ—Ü –ø–æ–ª—É—á–∏—Ç: {price} –≥—Ä–Ω\n"
                f"üè¶ –ö–æ–º–∏—Å—Å–∏—è —Å –ø—Ä–æ–¥–∞–≤—Ü–∞: {commission:.2f} –≥—Ä–Ω\n\n"
                "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —É–∫–∞–∑–∞–Ω–∏—é —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –ø—Ä–æ–¥–∞–≤—Ü–∞."
            )
            
        elif query.data == "commission_buyer":
            context.user_data['commission_payer'] = 'buyer'
            total_buyer = price + commission
            await query.edit_message_text(
                f"‚úÖ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç –∫–æ–º–∏—Å—Å–∏—é\n\n"
                f"üí∞ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –ø–ª–∞—Ç–∏—Ç: {total_buyer:.2f} –≥—Ä–Ω\n"
                f"üí≥ –ü—Ä–æ–¥–∞–≤–µ—Ü –ø–æ–ª—É—á–∏—Ç: {price} –≥—Ä–Ω\n"
                f"üè¶ –ö–æ–º–∏—Å—Å–∏—è —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è: {commission:.2f} –≥—Ä–Ω\n\n"
                "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —É–∫–∞–∑–∞–Ω–∏—é —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –ø—Ä–æ–¥–∞–≤—Ü–∞."
            )
            
        elif query.data == "commission_split":
            context.user_data['commission_payer'] = 'split'
            half_commission = commission / 2
            total_buyer = price + half_commission
            await query.edit_message_text(
                f"‚úÖ –ö–æ–º–∏—Å—Å–∏—è –¥–µ–ª–∏—Ç—Å—è –ø–æ—Ä–æ–≤–Ω—É\n\n"
                f"üí∞ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –ø–ª–∞—Ç–∏—Ç: {total_buyer:.2f} –≥—Ä–Ω\n"
                f"üí≥ –ü—Ä–æ–¥–∞–≤–µ—Ü –ø–æ–ª—É—á–∏—Ç: {price - half_commission:.2f} –≥—Ä–Ω\n"
                f"üè¶ –ö–æ–º–∏—Å—Å–∏—è —Å –∫–∞–∂–¥–æ–≥–æ: {half_commission:.2f} –≥—Ä–Ω\n\n"
                "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —É–∫–∞–∑–∞–Ω–∏—é —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –ø—Ä–æ–¥–∞–≤—Ü–∞."
            )
        
        # Show payment methods for seller
        await EscrowHandler._request_seller_payment_details(query, context)
        return PAYMENT_DETAILS
    
    @staticmethod
    async def _request_seller_payment_details(query, context):
        """Stage 3: Request seller payment details"""
        await query.edit_message_text(
            "üí≥ –ü—Ä–æ–¥–∞–≤–µ—Ü, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤:",
            reply_markup=Keyboards.payment_methods()
        )
    
    @staticmethod
    async def handle_payment_method_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle payment method selection"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "payment_ua_card":
            context.user_data['payment_method'] = 'ua_card'
            await query.edit_message_text(
                "üí≥ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä UA-–∫–∞—Ä—Ç—ã (16 —Ü–∏—Ñ—Ä):"
            )
            
        elif query.data == "payment_crypto_ton":
            context.user_data['payment_method'] = 'crypto_ton'
            await query.edit_message_text(
                "‚Çø –í–≤–µ–¥–∏—Ç–µ TON –∫–æ—à–µ–ª–µ–∫:"
            )
            
        elif query.data == "payment_crypto_usdt":
            context.user_data['payment_method'] = 'crypto_usdt'
            await query.edit_message_text(
                "üí∞ –í–≤–µ–¥–∏—Ç–µ USDT –∫–æ—à–µ–ª–µ–∫ (TRC20):"
            )
        
        return PAYMENT_DETAILS
    
    @staticmethod
    async def handle_payment_details_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle payment details input"""
        payment_info = update.message.text
        payment_method = context.user_data.get('payment_method')
        
        # Validate payment info based on method
        if payment_method == 'ua_card':
            if not payment_info.isdigit() or len(payment_info) != 16:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–∞—Ä—Ç—ã. –í–≤–µ–¥–∏—Ç–µ 16 —Ü–∏—Ñ—Ä:"
                )
                return PAYMENT_DETAILS
                
        elif payment_method in ['crypto_ton', 'crypto_usdt']:
            if len(payment_info) < 20:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ—à–µ–ª—å–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥—Ä–µ—Å:"
                )
                return PAYMENT_DETAILS
        
        context.user_data['payment_info'] = payment_info
        
        # Confirm payment details
        method_names = {
            'ua_card': 'UA-–∫–∞—Ä—Ç–∞',
            'crypto_ton': 'TON –∫–æ—à–µ–ª–µ–∫',
            'crypto_usdt': 'USDT –∫–æ—à–µ–ª–µ–∫'
        }
        
        await update.message.reply_text(
            f"üí≥ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:\n\n"
            f"–°–ø–æ—Å–æ–±: {method_names[payment_method]}\n"
            f"–†–µ–∫–≤–∏–∑–∏—Ç—ã: {payment_info}\n\n"
            "–í—Å–µ –≤–µ—Ä–Ω–æ?",
            reply_markup=Keyboards.yes_no("confirm_payment_details", "edit_payment_details")
        )
        
        return PAYMENT_PROCESSING
    
    @staticmethod
    async def handle_payment_details_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle payment details confirmation"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "confirm_payment_details":
            # Create transaction record
            await EscrowHandler._create_transaction_record(query, context)
            return VERIFICATION_VIDEO
            
        elif query.data == "edit_payment_details":
            await query.edit_message_text(
                "üí≥ –í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∑–∞–Ω–æ–≤–æ:",
                reply_markup=Keyboards.payment_methods()
            )
            return PAYMENT_DETAILS
    
    @staticmethod
    async def _create_transaction_record(query, context):
        """Create transaction in database and request payment"""
        chat_id = context.user_data.get('transaction_chat_id')
        price = context.user_data.get('transaction_price')
        commission_payer = context.user_data.get('commission_payer')
        payment_method = context.user_data.get('payment_method')
        payment_info = context.user_data.get('payment_info')
        
        with db_manager.get_session() as session:
            chat = session.query(Chat).filter(Chat.id == chat_id).first()
            
            # Determine seller and buyer
            current_user = session.query(User).filter(User.telegram_id == query.from_user.id).first()
            if current_user.id == chat.user1_id:  # Post author is seller
                seller_id = chat.user1_id
                buyer_id = chat.user2_id
            else:
                seller_id = chat.user2_id
                buyer_id = chat.user1_id
            
            commission = price * Config.ESCROW_COMMISSION
            
            # Create transaction
            transaction = Transaction(
                chat_id=chat_id,
                seller_id=seller_id,
                buyer_id=buyer_id,
                amount=price,
                commission=commission,
                commission_payer=commission_payer,
                payment_method=payment_method,
                seller_payment_info=json.dumps({
                    'method': payment_method,
                    'details': payment_info
                }),
                status=TransactionStatus.PAYMENT_PENDING,
                payment_deadline=datetime.now() + timedelta(hours=24),
                completion_deadline=datetime.now() + timedelta(hours=Config.TRANSACTION_TIMEOUT_HOURS + 24)
            )
            
            session.add(transaction)
            session.flush()
            
            # Update chat status
            from database.models import ChatStatus
            chat.status = ChatStatus.TRANSACTION
            
            context.user_data['transaction_id'] = transaction.id
            
            # Calculate payment amounts
            await EscrowHandler._request_payment(query, context, transaction)
    
    @staticmethod
    async def _request_payment(query, context, transaction):
        """Stage 4: Request payment from buyer"""
        commission = transaction.commission
        
        if transaction.commission_payer == 'buyer':
            total_to_pay = transaction.amount + commission
            commission_text = f"üè¶ –ö–æ–º–∏—Å—Å–∏—è: {commission:.2f} –≥—Ä–Ω"
        elif transaction.commission_payer == 'seller':
            total_to_pay = transaction.amount
            commission_text = f"üè¶ –ö–æ–º–∏—Å—Å–∏—è –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç –ø—Ä–æ–¥–∞–≤–µ—Ü"
        else:  # split
            half_commission = commission / 2
            total_to_pay = transaction.amount + half_commission
            commission_text = f"üè¶ –í–∞—à–∞ —á–∞—Å—Ç—å –∫–æ–º–∏—Å—Å–∏–∏: {half_commission:.2f} –≥—Ä–Ω"
        
        await query.edit_message_text(
            f"üí∞ –≠—Ç–∞–ø 4: –û–ø–ª–∞—Ç–∞\n\n"
            f"üíµ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {total_to_pay:.2f} –≥—Ä–Ω\n"
            f"{commission_text}\n\n"
            f"‚è∞ –°—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã: 24 —á–∞—Å–∞\n\n"
            "–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—É–º–º—É –Ω–∞ –Ω–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–ª–∞—Ç–µ–∂.\n\n"
            "üè¶ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n"
            "–ö–∞—Ä—Ç–∞: 1234 5678 9012 3456\n"
            "–ü–æ–ª—É—á–∞—Ç–µ–ª—å: –û–û–û –ò–≥—Ä–æ–≤–æ–π –ú–∞—Ä–∫–µ—Ç"
        )
        
        # Notify both parties
        await EscrowHandler._notify_payment_status(context, transaction, 'payment_requested')
    
    @staticmethod
    async def _notify_payment_status(context, transaction, status):
        """Notify both parties about payment status"""
        with db_manager.get_session() as session:
            seller = session.query(User).filter(User.id == transaction.seller_id).first()
            buyer = session.query(User).filter(User.id == transaction.buyer_id).first()
            
            if status == 'payment_requested':
                # Notify buyer
                try:
                    await context.bot.send_message(
                        chat_id=buyer.telegram_id,
                        text=f"üí∞ –û–∂–∏–¥–∞–µ—Ç—Å—è –≤–∞—à–∞ –æ–ø–ª–∞—Ç–∞\n\n"
                             f"–°—É–º–º–∞: {transaction.amount + (transaction.commission if transaction.commission_payer == 'buyer' else 0):.2f} –≥—Ä–Ω\n"
                             f"‚è∞ –°—Ä–æ–∫: 24 —á–∞—Å–∞"
                    )
                except Exception as e:
                    logger.error(f"Failed to notify buyer: {e}")
                
                # Notify seller
                try:
                    await context.bot.send_message(
                        chat_id=seller.telegram_id,
                        text="üí∞ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –æ–ø–ª–∞—Ç–µ. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤."
                    )
                except Exception as e:
                    logger.error(f"Failed to notify seller: {e}")
            
            elif status == 'payment_received':
                # Notify both parties
                try:
                    await context.bot.send_message(
                        chat_id=buyer.telegram_id,
                        text="‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω! –°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω—ã."
                    )
                    await context.bot.send_message(
                        chat_id=seller.telegram_id,
                        text="‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ–¥–∞–≤—Ü–∞."
                    )
                except Exception as e:
                    logger.error(f"Failed to notify payment received: {e}")
    
    @staticmethod
    async def handle_payment_received(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle payment confirmation (admin function)"""
        # This would be called by admin when payment is received
        transaction_id = context.user_data.get('transaction_id')
        
        with db_manager.get_session() as session:
            transaction = session.query(Transaction).filter(Transaction.id == transaction_id).first()
            
            if transaction:
                transaction.status = TransactionStatus.VERIFICATION_PENDING
                
                # Generate random verification phrase
                verification_phrase = random.choice(Config.VERIFICATION_PHRASES)
                transaction.verification_phrase = verification_phrase
                
                await EscrowHandler._request_seller_verification(update, context, transaction)
    
    @staticmethod
    async def _request_seller_verification(update, context, transaction):
        """Stage 5: Request seller verification video"""
        with db_manager.get_session() as session:
            seller = session.query(User).filter(User.id == transaction.seller_id).first()
            
            try:
                verification_text = f"üé• –≠—Ç–∞–ø 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞\n\n"
                verification_text += f"–ó–∞–ø–∏—à–∏—Ç–µ –≤–∏–¥–µ–æ-–∫—Ä—É–∂–æ–∫, –¥–µ—Ä–∂–∞ –¥–æ–∫—É–º–µ–Ω—Ç –≤ —Ä—É–∫–∞—Ö –∏ –ø—Ä–æ–∏–∑–Ω–µ—Å–∏—Ç–µ —Ñ—Ä–∞–∑—É:\n\n"
                verification_text += f"üó£ \"{transaction.verification_phrase}\"\n\n"
                verification_text += "–í–∏–¥–µ–æ –ø–æ—Å—Ç—É–ø–∏—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏."
                
                await context.bot.send_message(
                    chat_id=seller.telegram_id,
                    text=verification_text
                )
            except Exception as e:
                logger.error(f"Failed to request verification: {e}")
    
    @staticmethod
    async def handle_verification_video(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle verification video upload"""
        if update.message.video_note:
            user_id = update.effective_user.id
            video_file_id = update.message.video_note.file_id
            
            with db_manager.get_session() as session:
                # Find pending verification transaction
                user = session.query(User).filter(User.telegram_id == user_id).first()
                transaction = session.query(Transaction).filter(
                    Transaction.seller_id == user.id,
                    Transaction.status == TransactionStatus.VERIFICATION_PENDING
                ).first()
                
                if transaction:
                    transaction.verification_video_file_id = video_file_id
                    
                    await update.message.reply_text(
                        "‚úÖ –í–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω–æ! –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.\n\n"
                        "–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
                    )
                    
                    # Send to moderators
                    await EscrowHandler._send_verification_to_moderators(context, transaction)
                else:
                    await update.message.reply_text(
                        "‚ùå –ê–∫—Ç–∏–≤–Ω–∞—è —Å–¥–µ–ª–∫–∞ —Å –æ–∂–∏–¥–∞—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
                    )
        else:
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ-–∫—Ä—É–∂–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏."
            )
    
    @staticmethod
    async def _send_verification_to_moderators(context, transaction):
        """Send verification video to moderators"""
        try:
            with db_manager.get_session() as session:
                seller = session.query(User).filter(User.id == transaction.seller_id).first()
                
                verification_text = f"üé• –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞\n\n"
                verification_text += f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: {seller.first_name} (@{seller.username or '–Ω–µ—Ç'})\n"
                verification_text += f"üÜî ID: {seller.telegram_id}\n"
                verification_text += f"üí∞ –°—É–º–º–∞ —Å–¥–µ–ª–∫–∏: {transaction.amount} –≥—Ä–Ω\n"
                verification_text += f"üó£ –¢—Ä–µ–±—É–µ–º–∞—è —Ñ—Ä–∞–∑–∞: \"{transaction.verification_phrase}\"\n\n"
                verification_text += "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∏–¥–µ–æ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ª–∏—á–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–∞."
                
                await context.bot.send_video_note(
                    chat_id=Config.MODERATOR_GROUP_ID,
                    video_note=transaction.verification_video_file_id,
                    caption=verification_text,
                    reply_markup=Keyboards.admin_transaction_actions(transaction.id)
                )
        except Exception as e:
            logger.error(f"Failed to send verification to moderators: {e}")
    
    @staticmethod
    async def handle_verification_approval(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle verification approval by moderator"""
        query = update.callback_query
        await query.answer()
        
        if query.data.startswith("admin_confirm_"):
            transaction_id = int(query.data.split("_")[2])
            
            with db_manager.get_session() as session:
                transaction = session.query(Transaction).filter(Transaction.id == transaction_id).first()
                
                if transaction:
                    transaction.status = TransactionStatus.IN_PROGRESS
                    transaction.is_verified = True
                    
                    await query.edit_message_text(
                        f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
                        f"–°–¥–µ–ª–∫–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ –∞–∫—Ç–∏–≤–Ω—É—é —Ñ–∞–∑—É."
                    )
                    
                    # Start transaction timer
                    await EscrowHandler._start_transaction_phase(context, transaction)
        
        elif query.data.startswith("admin_reject_"):
            transaction_id = int(query.data.split("_")[2])
            
            with db_manager.get_session() as session:
                transaction = session.query(Transaction).filter(Transaction.id == transaction_id).first()
                
                if transaction:
                    transaction.status = TransactionStatus.CANCELLED
                    
                    await query.edit_message_text(
                        f"‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n\n"
                        f"–°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞, —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—é."
                    )
                    
                    # Notify parties about cancellation
                    await EscrowHandler._notify_transaction_cancelled(context, transaction, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")
    
    @staticmethod
    async def _start_transaction_phase(context, transaction):
        """Stage 6: Start active transaction phase"""
        with db_manager.get_session() as session:
            seller = session.query(User).filter(User.id == transaction.seller_id).first()
            buyer = session.query(User).filter(User.id == transaction.buyer_id).first()
            
            try:
                # Notify both parties
                transaction_text = f"ü§ù –≠—Ç–∞–ø 6: –ê–∫—Ç–∏–≤–Ω–∞—è —Å–¥–µ–ª–∫–∞\n\n"
                transaction_text += f"‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!\n"
                transaction_text += f"‚è∞ –£ –≤–∞—Å –µ—Å—Ç—å {Config.TRANSACTION_TIMEOUT_HOURS} —á–∞—Å–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏.\n\n"
                transaction_text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–∫–æ–π:"
                
                await context.bot.send_message(
                    chat_id=seller.telegram_id,
                    text=transaction_text,
                    reply_markup=Keyboards.transaction_actions(transaction.id)
                )
                
                await context.bot.send_message(
                    chat_id=buyer.telegram_id,
                    text=transaction_text,
                    reply_markup=Keyboards.transaction_actions(transaction.id)
                )
                
            except Exception as e:
                logger.error(f"Failed to start transaction phase: {e}")
    
    @staticmethod
    async def handle_transaction_completion(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle transaction completion confirmation"""
        query = update.callback_query
        await query.answer()
        
        if query.data.startswith("confirm_transaction_"):
            transaction_id = int(query.data.split("_")[2])
            user_id = query.from_user.id
            
            with db_manager.get_session() as session:
                transaction = session.query(Transaction).filter(Transaction.id == transaction_id).first()
                user = session.query(User).filter(User.telegram_id == user_id).first()
                
                if not transaction:
                    await query.edit_message_text("‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                    return
                
                # Check if both parties confirmed
                redis_client = db_manager.get_redis()
                confirmation_key = f"transaction_confirmations_{transaction_id}"
                
                # Add user confirmation
                redis_client.sadd(confirmation_key, str(user.id))
                redis_client.expire(confirmation_key, 3600)  # 1 hour expiry
                
                confirmations = redis_client.smembers(confirmation_key)
                
                if len(confirmations) >= 2:
                    # Both parties confirmed
                    transaction.status = TransactionStatus.COMPLETED
                    transaction.completed_at = datetime.now()
                    
                    await query.edit_message_text(
                        "‚úÖ –û–±–µ —Å—Ç–æ—Ä–æ–Ω—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏!\n\n"
                        "–°–¥–µ–ª–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≥–∞—Ä–∞–Ω—Ç—É –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
                    )
                    
                    # Send to moderators for final approval
                    await EscrowHandler._request_final_approval(context, transaction)
                    
                else:
                    await query.edit_message_text(
                        "‚úÖ –í–∞—à–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ.\n\n"
                        "–û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã."
                    )
        
        elif query.data.startswith("cancel_transaction_"):
            transaction_id = int(query.data.split("_")[2])
            
            await query.edit_message_text(
                "‚ùå –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É?\n\n"
                "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å.",
                reply_markup=Keyboards.yes_no(f"final_cancel_{transaction_id}", f"keep_transaction_{transaction_id}")
            )
        
        elif query.data.startswith("help_transaction_"):
            transaction_id = int(query.data.split("_")[2])
            
            await query.edit_message_text(
                "üÜò –ó–∞–ø—Ä–æ—Å –ø–æ–º–æ—â–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n\n"
                "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É:"
            )
            
            # Notify moderators
            await EscrowHandler._notify_help_request(context, transaction_id, query.from_user.id)
    
    @staticmethod
    async def _request_final_approval(context, transaction):
        """Request final approval from moderators"""
        try:
            with db_manager.get_session() as session:
                seller = session.query(User).filter(User.id == transaction.seller_id).first()
                buyer = session.query(User).filter(User.id == transaction.buyer_id).first()
                
                approval_text = f"üèÅ –§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏\n\n"
                approval_text += f"üí∞ –°—É–º–º–∞: {transaction.amount} –≥—Ä–Ω\n"
                approval_text += f"ü§µ –ü—Ä–æ–¥–∞–≤–µ—Ü: {seller.first_name} (@{seller.username or '–Ω–µ—Ç'})\n"
                approval_text += f"üõí –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {buyer.first_name} (@{buyer.username or '–Ω–µ—Ç'})\n"
                approval_text += f"üìÖ –î–∞—Ç–∞: {transaction.completed_at.strftime('%d.%m.%Y %H:%M')}\n\n"
                approval_text += "–û–±–µ —Å—Ç–æ—Ä–æ–Ω—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏."
                
                await context.bot.send_message(
                    chat_id=Config.MODERATOR_GROUP_ID,
                    text=approval_text,
                    reply_markup=Keyboards.admin_transaction_actions(transaction.id)
                )
        except Exception as e:
            logger.error(f"Failed to request final approval: {e}")
    
    @staticmethod
    async def handle_final_transaction_approval(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle final transaction approval by moderator"""
        query = update.callback_query
        await query.answer()
        
        if query.data.startswith("admin_confirm_"):
            transaction_id = int(query.data.split("_")[2])
            
            with db_manager.get_session() as session:
                transaction = session.query(Transaction).filter(Transaction.id == transaction_id).first()
                
                if transaction:
                    await query.edit_message_text(
                        f"‚úÖ –°–¥–µ–ª–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                        f"–°—Ä–µ–¥—Å—Ç–≤–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –ø—Ä–æ–¥–∞–≤—Ü—É."
                    )
                    
                    # Process payment to seller
                    await EscrowHandler._process_seller_payment(context, transaction)
                    
                    # Start rating process
                    await EscrowHandler._start_rating_process(context, transaction)
    
    @staticmethod
    async def _process_seller_payment(context, transaction):
        """Process payment to seller"""
        # In real implementation, this would integrate with payment processor
        with db_manager.get_session() as session:
            seller = session.query(User).filter(User.id == transaction.seller_id).first()
            buyer = session.query(User).filter(User.id == transaction.buyer_id).first()
            
            # Calculate final amounts
            commission = transaction.commission
            if transaction.commission_payer == 'seller':
                seller_receives = transaction.amount - commission
            elif transaction.commission_payer == 'split':
                seller_receives = transaction.amount - (commission / 2)
            else:
                seller_receives = transaction.amount
            
            # Update user statistics
            seller.total_transactions += 1
            seller.total_amount += transaction.amount
            buyer.total_transactions += 1
            buyer.total_amount += transaction.amount
            
            try:
                await context.bot.send_message(
                    chat_id=seller.telegram_id,
                    text=f"üí∞ –°—Ä–µ–¥—Å—Ç–≤–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã!\n\n"
                         f"–ü–æ–ª—É—á–µ–Ω–æ: {seller_receives:.2f} –≥—Ä–Ω\n"
                         f"–°–ø–æ—Å–æ–±: {transaction.payment_method}\n\n"
                         f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!"
                )
                
                await context.bot.send_message(
                    chat_id=buyer.telegram_id,
                    text=f"‚úÖ –°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                         f"–ü—Ä–æ–¥–∞–≤–µ—Ü –ø–æ–ª—É—á–∏–ª –æ–ø–ª–∞—Ç—É.\n"
                         f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!"
                )
            except Exception as e:
                logger.error(f"Failed to notify payment processed: {e}")
    
    @staticmethod
    async def _start_rating_process(context, transaction):
        """Stage 7: Start rating and review process"""
        with db_manager.get_session() as session:
            seller = session.query(User).filter(User.id == transaction.seller_id).first()
            buyer = session.query(User).filter(User.id == transaction.buyer_id).first()
            
            try:
                rating_text = f"‚≠ê –≠—Ç–∞–ø 7: –û—Ü–µ–Ω–∫–∞ –∏ –æ—Ç–∑—ã–≤\n\n"
                rating_text += f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –≤–∞—à–µ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –ø–æ —Å–¥–µ–ª–∫–µ.\n"
                rating_text += f"–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!"
                
                # Ask seller to rate buyer
                await context.bot.send_message(
                    chat_id=seller.telegram_id,
                    text=f"{rating_text}\n\n–û—Ü–µ–Ω–∏—Ç–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è {buyer.first_name}:",
                    reply_markup=Keyboards.rating_keyboard()
                )
                
                # Ask buyer to rate seller
                await context.bot.send_message(
                    chat_id=buyer.telegram_id,
                    text=f"{rating_text}\n\n–û—Ü–µ–Ω–∏—Ç–µ –ø—Ä–æ–¥–∞–≤—Ü–∞ {seller.first_name}:",
                    reply_markup=Keyboards.rating_keyboard()
                )
                
            except Exception as e:
                logger.error(f"Failed to start rating process: {e}")
    
    @staticmethod
    async def handle_rating_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle rating selection"""
        query = update.callback_query
        await query.answer()
        
        if query.data.startswith("rating_"):
            rating = int(query.data.split("_")[1])
            user_id = query.from_user.id
            
            # Store rating temporarily
            context.user_data['selected_rating'] = rating
            
            await query.edit_message_text(
                f"‚≠ê –í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ {rating} –∑–≤—ë–∑–¥.\n\n"
                f"–¢–µ–ø–µ—Ä—å –æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):"
            )
            
            return RATING_REVIEW
    
    @staticmethod
    async def handle_review_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle review text input"""
        if update.message.text == "/skip":
            review_text = ""
        else:
            review_text = update.message.text[:500]  # Limit review length
        
        rating = context.user_data.get('selected_rating')
        user_id = update.effective_user.id
        
        # Save review to database
        with db_manager.get_session() as session:
            # Find the transaction and create review
            user = session.query(User).filter(User.telegram_id == user_id).first()
            
            # For now, we'll store the review. In production, you'd link it to specific transaction
            await update.message.reply_text(
                f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!\n\n"
                f"‚≠ê –û—Ü–µ–Ω–∫–∞: {rating}/5\n"
                f"üí¨ –û—Ç–∑—ã–≤: {review_text or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
                f"–¢–µ–ø–µ—Ä—å –æ—Ü–µ–Ω–∏—Ç–µ –Ω–∞—à —Å–µ—Ä–≤–∏—Å:"
            )
            
            # Ask for bot rating
            await update.message.reply_text(
                "ü§ñ –ö–∞–∫ –≤–∞–º –Ω–∞—à —Å–µ—Ä–≤–∏—Å?",
                reply_markup=Keyboards.rating_keyboard()
            )
        
        return ConversationHandler.END
    
    @staticmethod
    async def _notify_transaction_cancelled(context, transaction, reason):
        """Notify parties about transaction cancellation"""
        with db_manager.get_session() as session:
            seller = session.query(User).filter(User.id == transaction.seller_id).first()
            buyer = session.query(User).filter(User.id == transaction.buyer_id).first()
            
            cancellation_text = f"‚ùå –°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞\n\n"
            cancellation_text += f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
            cancellation_text += f"–°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—é."
            
            try:
                await context.bot.send_message(chat_id=seller.telegram_id, text=cancellation_text)
                await context.bot.send_message(chat_id=buyer.telegram_id, text=cancellation_text)
            except Exception as e:
                logger.error(f"Failed to notify cancellation: {e}")
    
    @staticmethod
    async def _notify_help_request(context, transaction_id, user_id):
        """Notify moderators about help request"""
        try:
            with db_manager.get_session() as session:
                transaction = session.query(Transaction).filter(Transaction.id == transaction_id).first()
                user = session.query(User).filter(User.telegram_id == user_id).first()
                
                help_text = f"üÜò –ó–∞–ø—Ä–æ—Å –ø–æ–º–æ—â–∏\n\n"
                help_text += f"üë§ –û—Ç: {user.first_name} (@{user.username or '–Ω–µ—Ç'})\n"
                help_text += f"üí∞ –°–¥–µ–ª–∫–∞: {transaction.amount} –≥—Ä–Ω\n"
                help_text += f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
                help_text += "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å –ø–æ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–¥–µ–ª–∫–µ."
                
                await context.bot.send_message(
                    chat_id=Config.MODERATOR_GROUP_ID,
                    text=help_text,
                    reply_markup=Keyboards.admin_transaction_actions(transaction_id)
                )
        except Exception as e:
            logger.error(f"Failed to notify help request: {e}")