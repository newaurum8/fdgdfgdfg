from telegram import Update, Message
from telegram.ext import ContextTypes, CallbackQueryHandler, ConversationHandler
from utils.keyboards import Keyboards
from database.database import db_manager
from database.models import Post, Game, PostType, PriceType, User
from config import Config
import json
import random
import string
from datetime import datetime, timedelta
import logging

logger = logging.getLogger(__name__)

# Conversation states
(TYPE_SELECTION, PHOTOS_UPLOAD, DESCRIPTION_INPUT, PRICE_INPUT, 
 GAME_SELECTION, PIN_OFFER, SEARCH_WHAT, SEARCH_GAME, SEARCH_BUDGET,
 AUCTION_PHOTOS, AUCTION_DESC, AUCTION_GAME, AUCTION_MIN_PRICE, 
 AUCTION_TIMER) = range(14)

class AnnouncementHandler:
    
    @staticmethod
    async def start_announcement(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle announcement type selection"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "announce_create":
            await query.edit_message_text(
                "üí∞ –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å –∏–ª–∏ –∫—É–ø–∏—Ç—å?",
                reply_markup=Keyboards.sell_or_buy()
            )
            return TYPE_SELECTION
            
        elif query.data == "announce_search":
            await query.edit_message_text(
                "üîç –ß—Ç–æ –≤—ã –∏—â–µ—Ç–µ? –û–ø–∏—à–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–ª–∏ —É—Å–ª—É–≥—É:"
            )
            context.user_data['announcement_type'] = 'search'
            return SEARCH_WHAT
            
        elif query.data == "announce_auction":
            await AnnouncementHandler._show_auction_info(query, context)
            return AUCTION_PHOTOS
    
    @staticmethod
    async def handle_type_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle sell/buy type selection"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "type_sell":
            context.user_data['post_type'] = PostType.SELL
            await query.edit_message_text(
                "üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ (–¥–æ 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π).\n\n"
                "–ö–æ–≥–¥–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤—Å–µ —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /done"
            )
            context.user_data['photos'] = []
            return PHOTOS_UPLOAD
            
        elif query.data == "type_buy":
            context.user_data['post_type'] = PostType.BUY
            await query.edit_message_text(
                "üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–∏–º–µ—Ä–∞ —Ç–æ–≥–æ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ).\n\n"
                "–ú–æ–∂–µ—Ç–µ —Å—Ä–∞–∑—É –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–∏—Å–∞–Ω–∏—é, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–æ–º–∞–Ω–¥—É /skip"
            )
            context.user_data['photos'] = []
            return PHOTOS_UPLOAD
    
    @staticmethod
    async def handle_photo_upload(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle photo uploads"""
        if update.message.text == "/done":
            if not context.user_data.get('photos') and context.user_data['post_type'] == PostType.SELL:
                await update.message.reply_text(
                    "‚ùå –î–ª—è –ø—Ä–æ–¥–∞–∂–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ."
                )
                return PHOTOS_UPLOAD
                
            await update.message.reply_text(
                "üìù –¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ –≤–∞—à —Ç–æ–≤–∞—Ä:"
            )
            return DESCRIPTION_INPUT
            
        elif update.message.text == "/skip":
            await update.message.reply_text(
                "üìù –û–ø–∏—à–∏—Ç–µ –≤–∞—à —Ç–æ–≤–∞—Ä:"
            )
            return DESCRIPTION_INPUT
            
        elif update.message.photo:
            photos = context.user_data.get('photos', [])
            if len(photos) >= Config.MAX_PHOTOS:
                await update.message.reply_text(
                    f"‚ùå –ú–∞–∫—Å–∏–º—É–º {Config.MAX_PHOTOS} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π."
                )
                return PHOTOS_UPLOAD
                
            photo_file_id = update.message.photo[-1].file_id
            photos.append(photo_file_id)
            context.user_data['photos'] = photos
            
            await update.message.reply_text(
                f"‚úÖ –§–æ—Ç–æ {len(photos)}/{Config.MAX_PHOTOS} –∑–∞–≥—Ä—É–∂–µ–Ω–æ.\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /done –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ."
            )
            return PHOTOS_UPLOAD
        else:
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /done"
            )
            return PHOTOS_UPLOAD
    
    @staticmethod
    async def handle_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle description input"""
        description = update.message.text
        if len(description) > 1000:
            await update.message.reply_text(
                "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤."
            )
            return DESCRIPTION_INPUT
            
        context.user_data['description'] = description
        
        await update.message.reply_text(
            "üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ü–µ–Ω—ã:",
            reply_markup=Keyboards.price_type()
        )
        return PRICE_INPUT
    
    @staticmethod
    async def handle_price_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle price type selection"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "price_fixed":
            context.user_data['price_type'] = PriceType.FIXED
            await query.edit_message_text(
                "üíµ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ –≥—Ä–∏–≤–Ω–∞—Ö (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):"
            )
            return PRICE_INPUT
            
        elif query.data == "price_negotiable":
            context.user_data['price_type'] = PriceType.NEGOTIABLE
            context.user_data['price'] = None
            await AnnouncementHandler._show_games_selection(query, context)
            return GAME_SELECTION
            
        elif query.data == "price_none":
            context.user_data['price_type'] = PriceType.NO_PRICE
            context.user_data['price'] = None
            await AnnouncementHandler._show_games_selection(query, context)
            return GAME_SELECTION
    
    @staticmethod
    async def handle_price_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle price numeric input"""
        try:
            price = float(update.message.text)
            if price <= 0:
                raise ValueError("Price must be positive")
                
            context.user_data['price'] = price
            await AnnouncementHandler._show_games_selection_message(update, context)
            return GAME_SELECTION
            
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):"
            )
            return PRICE_INPUT
    
    @staticmethod
    async def _show_games_selection(query, context):
        """Show games selection keyboard"""
        with db_manager.get_session() as session:
            games = session.query(Game).filter(Game.is_active == True).all()
            
            await query.edit_message_text(
                "üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞:",
                reply_markup=Keyboards.games_pagination(games)
            )
    
    @staticmethod
    async def _show_games_selection_message(update, context):
        """Show games selection for message updates"""
        with db_manager.get_session() as session:
            games = session.query(Game).filter(Game.is_active == True).all()
            
            await update.message.reply_text(
                "üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞:",
                reply_markup=Keyboards.games_pagination(games)
            )
    
    @staticmethod
    async def handle_game_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle game selection"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "game_none":
            context.user_data['game_id'] = None
        elif query.data.startswith("game_"):
            game_id = int(query.data.split("_")[1])
            context.user_data['game_id'] = game_id
        elif query.data.startswith("games_page_"):
            # Handle pagination
            page = int(query.data.split("_")[2])
            with db_manager.get_session() as session:
                games = session.query(Game).filter(Game.is_active == True).all()
                await query.edit_message_reply_markup(
                    reply_markup=Keyboards.games_pagination(games, page)
                )
            return GAME_SELECTION
        else:
            return GAME_SELECTION
        
        # Show pin offer
        await query.edit_message_text(
            f"üìå –•–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä–µ–ø–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∑–∞ {Config.PIN_PRICE} –≥—Ä–Ω?\n\n"
            "–ó–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –≤ —Ç–æ–ø–µ –∫–∞–Ω–∞–ª–∞.",
            reply_markup=Keyboards.yes_no("pin_yes", "pin_no")
        )
        return PIN_OFFER
    
    @staticmethod
    async def handle_pin_offer(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle pin offer response"""
        query = update.callback_query
        await query.answer()
        
        context.user_data['pin_post'] = query.data == "pin_yes"
        
        # Create and publish post
        await AnnouncementHandler._create_post(query, context)
        return ConversationHandler.END
    
    @staticmethod
    async def _create_post(query, context):
        """Create and publish post"""
        user_id = query.from_user.id
        
        with db_manager.get_session() as session:
            # Get user
            user = session.query(User).filter(User.telegram_id == user_id).first()
            
            # Generate unique ID
            unique_id = AnnouncementHandler._generate_unique_id()
            
            # Create post
            post = Post(
                unique_id=unique_id,
                user_id=user.id,
                game_id=context.user_data.get('game_id'),
                post_type=context.user_data['post_type'],
                title=context.user_data['description'][:100],  # First 100 chars as title
                description=context.user_data['description'],
                price=context.user_data.get('price'),
                price_type=context.user_data['price_type'],
                photos=json.dumps(context.user_data.get('photos', [])),
                is_pinned=context.user_data.get('pin_post', False),
                expires_at=datetime.now() + timedelta(hours=Config.POST_DURATION_HOURS)
            )
            
            session.add(post)
            session.flush()
            
            # Publish to channel
            message_id = await AnnouncementHandler._publish_to_channel(query, post, context)
            post.channel_message_id = message_id
            
            # Calculate total cost
            total_cost = Config.POST_PRICE
            if context.user_data.get('pin_post'):
                total_cost += Config.PIN_PRICE
            
            await query.edit_message_text(
                f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ #{unique_id} —Å–æ–∑–¥–∞–Ω–æ!\n\n"
                f"üí∞ –ö –æ–ø–ª–∞—Ç–µ: {total_cost} –≥—Ä–Ω\n"
                f"‚è∞ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ {Config.POST_DURATION_HOURS} —á–∞—Å–æ–≤\n\n"
                "–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ!"
            )
    
    @staticmethod
    async def _publish_to_channel(query, post, context):
        """Publish post to channel"""
        # Format post message
        game_text = ""
        if post.game_id:
            with db_manager.get_session() as session:
                game = session.query(Game).filter(Game.id == post.game_id).first()
                if game:
                    game_text = f"#{game.hashtag}"
        
        price_text = ""
        if post.price_type == PriceType.FIXED and post.price:
            price_text = f"üí∞ {post.price} –≥—Ä–Ω"
        elif post.price_type == PriceType.NEGOTIABLE:
            price_text = "üí¨ –î–æ–≥–æ–≤–æ—Ä–Ω–∞—è"
        elif post.price_type == PriceType.NO_PRICE:
            price_text = "üÜì –¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
        
        type_emoji = "üí∞" if post.post_type == PostType.SELL else "üõí"
        type_text = "–ü—Ä–æ–¥–∞–º" if post.post_type == PostType.SELL else "–ö—É–ø–ª—é"
        
        message_text = f"{type_emoji} {type_text}\n\n"
        message_text += f"üìù {post.description}\n\n"
        if price_text:
            message_text += f"{price_text}\n"
        if game_text:
            message_text += f"üéÆ {game_text}\n"
        message_text += f"\n#{post.unique_id}"
        
        # Send to channel
        photos = json.loads(post.photos) if post.photos else []
        
        try:
            if photos:
                # Send with photo
                message = await context.bot.send_photo(
                    chat_id=Config.CHANNEL_ID,
                    photo=photos[0],
                    caption=message_text,
                    reply_markup=Keyboards.open_in_bot(post.unique_id)
                )
            else:
                # Send text only
                message = await context.bot.send_message(
                    chat_id=Config.CHANNEL_ID,
                    text=message_text,
                    reply_markup=Keyboards.open_in_bot(post.unique_id)
                )
            
            # Pin if requested
            if post.is_pinned:
                await context.bot.pin_chat_message(
                    chat_id=Config.CHANNEL_ID,
                    message_id=message.message_id
                )
            
            return message.message_id
            
        except Exception as e:
            logger.error(f"Failed to publish to channel: {e}")
            return None
    
    @staticmethod
    def _generate_unique_id():
        """Generate unique post ID"""
        return ''.join(random.choices(string.digits, k=8))
    
    # Search functionality
    @staticmethod
    async def handle_search_what(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle search 'what' input"""
        context.user_data['search_what'] = update.message.text
        
        with db_manager.get_session() as session:
            games = session.query(Game).filter(Game.is_active == True).all()
            
            await update.message.reply_text(
                "üéÆ –î–ª—è –∫–∞–∫–æ–π –∏–≥—Ä—ã?",
                reply_markup=Keyboards.games_pagination(games)
            )
        return SEARCH_GAME
    
    @staticmethod
    async def handle_search_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle search game selection"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "game_none":
            context.user_data['search_game_id'] = None
        elif query.data.startswith("game_"):
            game_id = int(query.data.split("_")[1])
            context.user_data['search_game_id'] = game_id
        elif query.data.startswith("games_page_"):
            # Handle pagination
            page = int(query.data.split("_")[2])
            with db_manager.get_session() as session:
                games = session.query(Game).filter(Game.is_active == True).all()
                await query.edit_message_reply_markup(
                    reply_markup=Keyboards.games_pagination(games, page)
                )
            return SEARCH_GAME
        else:
            return SEARCH_GAME
        
        await query.edit_message_text(
            "üí∞ –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω—ã–π –±—é–¥–∂–µ—Ç:",
            reply_markup=Keyboards.price_type()
        )
        return SEARCH_BUDGET
    
    @staticmethod
    async def handle_search_budget(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle search budget selection"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "price_fixed":
            await query.edit_message_text(
                "üíµ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –±—é–¥–∂–µ—Ç–∞ –≤ –≥—Ä–∏–≤–Ω–∞—Ö:"
            )
            return SEARCH_BUDGET
        elif query.data in ["price_negotiable", "price_none"]:
            context.user_data['search_budget'] = None
            context.user_data['search_budget_type'] = query.data
            await AnnouncementHandler._create_search_post(query, context)
            return ConversationHandler.END
    
    @staticmethod
    async def handle_search_budget_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle search budget numeric input"""
        try:
            budget = float(update.message.text)
            if budget <= 0:
                raise ValueError("Budget must be positive")
                
            context.user_data['search_budget'] = budget
            context.user_data['search_budget_type'] = 'fixed'
            await AnnouncementHandler._create_search_post_message(update, context)
            return ConversationHandler.END
            
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É:"
            )
            return SEARCH_BUDGET
    
    @staticmethod
    async def _create_search_post(query, context):
        """Create search post"""
        await AnnouncementHandler._create_search_post_common(query.from_user.id, context, query.bot, query.edit_message_text)
    
    @staticmethod
    async def _create_search_post_message(update, context):
        """Create search post from message"""
        await AnnouncementHandler._create_search_post_common(update.effective_user.id, context, update.bot, update.message.reply_text)
    
    @staticmethod
    async def _create_search_post_common(user_id, context, bot, reply_func):
        """Common search post creation logic"""
        with db_manager.get_session() as session:
            user = session.query(User).filter(User.telegram_id == user_id).first()
            unique_id = AnnouncementHandler._generate_unique_id()
            
            # Create search post
            post = Post(
                unique_id=unique_id,
                user_id=user.id,
                game_id=context.user_data.get('search_game_id'),
                post_type=PostType.SEARCH,
                title=f"–ò—â—É: {context.user_data['search_what'][:50]}",
                description=context.user_data['search_what'],
                price=context.user_data.get('search_budget'),
                price_type=PriceType.FIXED if context.user_data.get('search_budget') else PriceType.NEGOTIABLE,
                expires_at=datetime.now() + timedelta(hours=Config.POST_DURATION_HOURS)
            )
            
            session.add(post)
            session.flush()
            
            # Publish to channel
            await AnnouncementHandler._publish_search_to_channel(post, context, bot)
            
            await reply_func(
                f"‚úÖ –ü–æ–∏—Å–∫–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ #{unique_id} —Å–æ–∑–¥–∞–Ω–æ!\n\n"
                f"üí∞ –ö –æ–ø–ª–∞—Ç–µ: {Config.POST_PRICE} –≥—Ä–Ω\n"
                f"‚è∞ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ {Config.POST_DURATION_HOURS} —á–∞—Å–æ–≤"
            )
    
    @staticmethod
    async def _publish_search_to_channel(post, context, bot):
        """Publish search post to channel"""
        game_text = ""
        if post.game_id:
            with db_manager.get_session() as session:
                game = session.query(Game).filter(Game.id == post.game_id).first()
                if game:
                    game_text = f"#{game.hashtag}"
        
        budget_text = ""
        if post.price:
            budget_text = f"üí∞ –ë—é–¥–∂–µ—Ç: {post.price} –≥—Ä–Ω"
        else:
            budget_text = "üí¨ –ë—é–¥–∂–µ—Ç –¥–æ–≥–æ–≤–æ—Ä–Ω–æ–π"
        
        message_text = f"üîç –ò—â—É\n\n"
        message_text += f"üìù {post.description}\n\n"
        message_text += f"{budget_text}\n"
        if game_text:
            message_text += f"üéÆ {game_text}\n"
        message_text += f"\n#{post.unique_id}"
        
        try:
            message = await bot.send_message(
                chat_id=Config.CHANNEL_ID,
                text=message_text,
                reply_markup=Keyboards.open_in_bot(post.unique_id)
            )
            
            # Update post with message ID
            with db_manager.get_session() as session:
                post = session.query(Post).filter(Post.id == post.id).first()
                post.channel_message_id = message.message_id
                
        except Exception as e:
            logger.error(f"Failed to publish search to channel: {e}")
    
    # Auction functionality
    @staticmethod
    async def _show_auction_info(query, context):
        """Show auction information"""
        auction_info = """
üì£ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞—É–∫—Ü–∏–æ–Ω:

1Ô∏è‚É£ –í—ã —Å–æ–∑–¥–∞—ë—Ç–µ –ª–æ—Ç —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π
2Ô∏è‚É£ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç–µ —Ç–∞–π–º–µ—Ä (30 –º–∏–Ω - 2 —á–∞—Å–∞)
3Ô∏è‚É£ –£—á–∞—Å—Ç–Ω–∏–∫–∏ –¥–µ–ª–∞—é—Ç —Å—Ç–∞–≤–∫–∏
4Ô∏è‚É£ –ü–æ–±–µ–∂–¥–∞–µ—Ç –ª—É—á—à–∞—è —Å—Ç–∞–≤–∫–∞
5Ô∏è‚É£ –£ –≤–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è

üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞:
        """
        
        await query.edit_message_text(auction_info)
        context.user_data['announcement_type'] = 'auction'
        context.user_data['photos'] = []
    
    @staticmethod
    async def handle_auction_photos(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle auction photo upload"""
        return await AnnouncementHandler.handle_photo_upload(update, context)
    
    @staticmethod
    async def handle_auction_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle auction description"""
        context.user_data['description'] = update.message.text
        
        with db_manager.get_session() as session:
            games = session.query(Game).filter(Game.is_active == True).all()
            
            await update.message.reply_text(
                "üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:",
                reply_markup=Keyboards.games_pagination(games)
            )
        return AUCTION_GAME
    
    @staticmethod
    async def handle_auction_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle auction game selection"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "game_none":
            context.user_data['game_id'] = None
        elif query.data.startswith("game_"):
            game_id = int(query.data.split("_")[1])
            context.user_data['game_id'] = game_id
        elif query.data.startswith("games_page_"):
            page = int(query.data.split("_")[2])
            with db_manager.get_session() as session:
                games = session.query(Game).filter(Game.is_active == True).all()
                await query.edit_message_reply_markup(
                    reply_markup=Keyboards.games_pagination(games, page)
                )
            return AUCTION_GAME
        else:
            return AUCTION_GAME
        
        await query.edit_message_text(
            "üí∞ –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞:"
        )
        return AUCTION_MIN_PRICE
    
    @staticmethod
    async def handle_auction_min_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle auction minimum price"""
        try:
            min_price = float(update.message.text)
            if min_price <= 0:
                raise ValueError("Price must be positive")
                
            context.user_data['min_price'] = min_price
            
            await update.message.reply_text(
                "‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–∫—Ü–∏–æ–Ω–∞:",
                reply_markup=Keyboards.auction_timer()
            )
            return AUCTION_TIMER
            
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É:"
            )
            return AUCTION_MIN_PRICE
    
    @staticmethod
    async def handle_auction_timer(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle auction timer selection"""
        query = update.callback_query
        await query.answer()
        
        if query.data.startswith("timer_"):
            timer_minutes = int(query.data.split("_")[1])
            context.user_data['auction_timer'] = timer_minutes
            
            await AnnouncementHandler._create_auction_post(query, context)
            return ConversationHandler.END
        
        return AUCTION_TIMER
    
    @staticmethod
    async def _create_auction_post(query, context):
        """Create auction post"""
        user_id = query.from_user.id
        
        with db_manager.get_session() as session:
            user = session.query(User).filter(User.telegram_id == user_id).first()
            unique_id = AnnouncementHandler._generate_unique_id()
            
            auction_end_time = datetime.now() + timedelta(minutes=context.user_data['auction_timer'])
            
            post = Post(
                unique_id=unique_id,
                user_id=user.id,
                game_id=context.user_data.get('game_id'),
                post_type=PostType.AUCTION,
                title=context.user_data['description'][:100],
                description=context.user_data['description'],
                min_price=context.user_data['min_price'],
                auction_timer=context.user_data['auction_timer'],
                auction_end_time=auction_end_time,
                photos=json.dumps(context.user_data.get('photos', [])),
                expires_at=auction_end_time
            )
            
            session.add(post)
            session.flush()
            
            # Publish to channel
            await AnnouncementHandler._publish_auction_to_channel(query, post, context)
            
            timer_text = f"{context.user_data['auction_timer']} –º–∏–Ω—É—Ç" if context.user_data['auction_timer'] < 60 else f"{context.user_data['auction_timer'] // 60} —á–∞—Å(–∞)"
            
            await query.edit_message_text(
                f"üèÜ –ê—É–∫—Ü–∏–æ–Ω #{unique_id} —Å–æ–∑–¥–∞–Ω!\n\n"
                f"üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {context.user_data['min_price']} –≥—Ä–Ω\n"
                f"‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {timer_text}\n"
                f"üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—Å—è: {auction_end_time.strftime('%d.%m %H:%M')}\n\n"
                "–ê—É–∫—Ü–∏–æ–Ω –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ!"
            )
    
    @staticmethod
    async def _publish_auction_to_channel(query, post, context):
        """Publish auction to channel"""
        game_text = ""
        if post.game_id:
            with db_manager.get_session() as session:
                game = session.query(Game).filter(Game.id == post.game_id).first()
                if game:
                    game_text = f"#{game.hashtag}"
        
        timer_text = f"{post.auction_timer} –º–∏–Ω—É—Ç" if post.auction_timer < 60 else f"{post.auction_timer // 60} —á–∞—Å(–∞)"
        
        message_text = f"üèÜ –ê–£–ö–¶–ò–û–ù\n\n"
        message_text += f"üìù {post.description}\n\n"
        message_text += f"üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {post.min_price} –≥—Ä–Ω\n"
        message_text += f"‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {timer_text}\n"
        message_text += f"üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—Å—è: {post.auction_end_time.strftime('%d.%m %H:%M')}\n"
        if game_text:
            message_text += f"üéÆ {game_text}\n"
        message_text += f"\n#{post.unique_id}"
        
        photos = json.loads(post.photos) if post.photos else []
        
        try:
            if photos:
                message = await context.bot.send_photo(
                    chat_id=Config.CHANNEL_ID,
                    photo=photos[0],
                    caption=message_text,
                    reply_markup=Keyboards.open_in_bot(post.unique_id)
                )
            else:
                message = await context.bot.send_message(
                    chat_id=Config.CHANNEL_ID,
                    text=message_text,
                    reply_markup=Keyboards.open_in_bot(post.unique_id)
                )
            
            # Update post with message ID
            with db_manager.get_session() as session:
                post_update = session.query(Post).filter(Post.id == post.id).first()
                post_update.channel_message_id = message.message_id
                
        except Exception as e:
            logger.error(f"Failed to publish auction to channel: {e}")
    
    @staticmethod
    async def cancel_announcement(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Cancel announcement creation"""
        await update.message.reply_text(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=Keyboards.main_menu()
        )
        return ConversationHandler.END