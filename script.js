document.addEventListener('DOMContentLoaded', function() {
    // --- –ì–õ–û–ë–ê–õ–¨–ù–ò–ô –°–¢–ê–ù ---
    // Show loading screen initially
    setTimeout(() => {
        const loadingScreen = document.getElementById('loading-screen');
        if (loadingScreen) loadingScreen.classList.add('hidden');
    }, 2000);


    // --- –£–õ–£–ß–®–ï–ù–ù–´–ô –ì–õ–û–ë–ê–õ–¨–ù–ò–ô –°–¢–ê–ù ---
    const STATE = {
        userBalance: 1250,
        userGems: 0,
        userLevel: 1,
        userExp: 0,
        userExpMax: 1000,
        inventory: [],
        gameHistory: [],
        isSpinning: false,
        openQuantity: 1,
        currentCaseType: 'common',
        fastOpen: false,
        lastWonItems: [],
        contestTicketPrice: 100,
        ticketQuantity: 1,
        userTickets: 0,
        contestEndDate: new Date(Date.now() + 6 * 24 * 60 * 60 * 1000 + 15 * 60 * 60 * 1000),

        // –£–ª—É—á—à–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã —Å —Ä–µ–¥–∫–æ—Å—Ç—å—é
        possibleItems: {
            common: [
                { id: 1, name: 'Stone', imageSrc: 'case.png', value: 50, rarity: 'common' },
                { id: 2, name: 'Wood', imageSrc: 'item1.png', value: 75, rarity: 'common' },
                { id: 3, name: 'Coal', imageSrc: 'coin.png', value: 100, rarity: 'common' },
            ],
            rare: [
                { id: 4, name: 'Iron', imageSrc: 'miner.png', value: 250, rarity: 'rare' },
                { id: 5, name: 'Silver', imageSrc: 'item.png', value: 350, rarity: 'rare' },
                { id: 6, name: 'Emerald', imageSrc: 'diamond.png', value: 500, rarity: 'rare' },
            ],
            epic: [
                { id: 7, name: 'Gold', imageSrc: 'coin.png', value: 1000, rarity: 'epic' },
                { id: 8, name: 'Platinum', imageSrc: 'item1.png', value: 1500, rarity: 'epic' },
                { id: 9, name: 'Ruby', imageSrc: 'diamond.png', value: 2000, rarity: 'epic' },
            ],
            legendary: [
                { id: 10, name: 'Diamond', imageSrc: 'diamond.png', value: 5000, rarity: 'legendary' },
                { id: 11, name: 'Star Crystal', imageSrc: 'item.png', value: 10000, rarity: 'legendary' },
                { id: 12, name: 'Mythril', imageSrc: 'miner.png', value: 15000, rarity: 'legendary' },
            ]
        },

        caseTypes: {
            common: { price: 100, name: '–û–±—ã—á–Ω—ã–π' },
            rare: { price: 250, name: '–†–µ–¥–∫–∏–π' },
            epic: { price: 500, name: '–≠–ø–∏—á–µ—Å–∫–∏–π' },
            legendary: { price: 1000, name: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π' }
        },

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞
        stats: {
            totalOpened: 0,
            totalWon: 0,
            biggestWin: 0,
            totalGamesPlayed: 0,
            referrals: 0,
            referralBonus: 0
        },

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä
        gameStats: {
            coinflip: { total: 0, wins: 0 },
            rps: { total: 0, wins: 0, draws: 0 },
            slots: { total: 0, wins: 0 },
            crash: { total: 0, wins: 0, bestMultiplier: 1 },
            blackjack: { total: 0, wins: 0 },
            miner: { total: 0, wins: 0 },
            tower: { total: 0, wins: 0 }
        },

        // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        achievements: [
            { id: 1, name: '–ü–µ—Ä–≤—ã–π –∫–µ–π—Å', description: '–û—Ç–∫—Ä–æ–π—Ç–µ –ø–µ—Ä–≤—ã–π –∫–µ–π—Å', completed: false, reward: 100 },
            { id: 2, name: '–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä', description: '–û—Ç–∫—Ä–æ–π—Ç–µ 10 –∫–µ–π—Å–æ–≤', completed: false, reward: 500 },
            { id: 3, name: '–£–¥–∞—á–ª–∏–≤—ã–π', description: '–í—ã–∏–≥—Ä–∞–π—Ç–µ –ø—Ä–µ–¥–º–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å—é –±–æ–ª–µ–µ 1000 ‚≠ê', completed: false, reward: 250 },
            { id: 4, name: '–ú–∏–ª–ª–∏–æ–Ω–µ—Ä', description: '–ù–∞–∫–æ–ø–∏—Ç–µ 10000 ‚≠ê', completed: false, reward: 1000 },
            { id: 5, name: '–ò–≥—Ä–æ–º–∞–Ω', description: '–°—ã–≥—Ä–∞–π—Ç–µ 50 –º–∏–Ω–∏-–∏–≥—Ä', completed: false, reward: 750 },
        ],

        // –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
        dailyTasks: [
            { id: 1, name: '–û—Ç–∫—Ä—ã—Ç—å 5 –∫–µ–π—Å–æ–≤', progress: 0, target: 5, reward: 200, completed: false },
            { id: 2, name: '–í—ã–∏–≥—Ä–∞—Ç—å –≤ –ª—é–±–æ–π –∏–≥—Ä–µ 3 —Ä–∞–∑–∞', progress: 0, target: 3, reward: 150, completed: false },
            { id: 3, name: '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞', progress: 0, target: 1, reward: 500, completed: false },
        ],
        upgradeState: {
            yourItem: null,
            targetItem: null,
            chance: 0,
            isUpgrading: false,
        },
        slotsState: {
            isSpinning: false,
            symbols: [
                { name: 'Lemon', imageSrc: 'slot_lemon.png', multiplier: 10 },
                { name: 'Cherry', imageSrc: 'slot_cherry.png', multiplier: 5 },
                { name: 'Seven', imageSrc: 'slot_7.png', multiplier: 20 },
            ]
        },
        towerState: {
            isActive: false,
            bet: 100,
            currentLevel: 0,
            grid: [], // 0 for left bomb, 1 for right bomb
            payouts: []
        },

        // –ù–æ–≤—ã–µ –∏–≥—Ä—ã
        crashState: {
            isActive: false,
            bet: 100,
            autoCashout: 2.0,
            currentMultiplier: 1.0,
            hasPlacedBet: false,
            gameStartTime: 0,
            history: []
        },

        blackjackState: {
            isActive: false,
            bet: 100,
            playerCards: [],
            dealerCards: [],
            playerScore: 0,
            dealerScore: 0,
            gamePhase: 'betting', // betting, playing, dealer, finished
            canDouble: false,
            deck: []
        }
    };


    function updateBalanceDisplay() {
        if (UI.userBalanceElement) UI.userBalanceElement.innerText = Math.round(STATE.userBalance).toLocaleString('uk-UA');
        if (UI.userGemsElement) UI.userGemsElement.innerText = STATE.userGems;
        if (UI.userLevelElement) UI.userLevelElement.innerText = STATE.userLevel;
    }

    function updateProfileStats() {
        if (UI.totalOpenedElement) UI.totalOpenedElement.textContent = STATE.stats.totalOpened;
        if (UI.totalWonElement) UI.totalWonElement.textContent = STATE.stats.totalWon.toLocaleString('uk-UA');
        if (UI.biggestWinElement) UI.biggestWinElement.textContent = STATE.stats.biggestWin.toLocaleString('uk-UA');
        if (UI.profileLevelElement) UI.profileLevelElement.textContent = STATE.userLevel;
        if (UI.profileExpElement) UI.profileExpElement.textContent = STATE.userExp;
        if (UI.profileExpMaxElement) UI.profileExpMaxElement.textContent = STATE.userExpMax;
        if (UI.profileExpBar) {
            const progress = (STATE.userExp / STATE.userExpMax) * 100;
            UI.profileExpBar.style.width = `${progress}%`;
        }
    }

    function addExperience(amount) {
        STATE.userExp += amount;
        while (STATE.userExp >= STATE.userExpMax) {
            STATE.userExp -= STATE.userExpMax;
            STATE.userLevel++;
            STATE.userExpMax = Math.floor(STATE.userExpMax * 1.5);
            showNotification(`üéâ –£—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω –¥–æ ${STATE.userLevel}!`);
            showAchievement(`–ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å ${STATE.userLevel}!`, '–í—ã –ø–æ–ª—É—á–∏–ª–∏ 100 ‚≠ê');
            STATE.userBalance += 100;
        }
        updateBalanceDisplay();
        updateProfileStats();
    }

    function showAchievement(title, description) {
        const toast = UI.achievementToast;
        if (!toast) return;
        toast.innerHTML = `<div><strong>${title}</strong><br>${description}</div>`;
        toast.classList.add('visible');
        setTimeout(() => toast.classList.remove('visible'), 4000);
    }

    function checkAchievements() {
        STATE.achievements.forEach(achievement => {
            if (achievement.completed) return;

            let shouldComplete = false;
            switch (achievement.id) {
                case 1: // –ü–µ—Ä–≤—ã–π –∫–µ–π—Å
                    shouldComplete = STATE.stats.totalOpened >= 1;
                    break;
                case 2: // 10 –∫–µ–π—Å–æ–≤
                    shouldComplete = STATE.stats.totalOpened >= 10;
                    break;
                case 3: // –í—ã–∏–≥—Ä—ã—à > 1000
                    shouldComplete = STATE.stats.biggestWin >= 1000;
                    break;
                case 4: // 10000 –∑–≤–µ–∑–¥
                    shouldComplete = STATE.userBalance >= 10000;
                    break;
                case 5: // 50 –∏–≥—Ä
                    shouldComplete = STATE.stats.totalGamesPlayed >= 50;
                    break;
            }

            if (shouldComplete) {
                achievement.completed = true;
                STATE.userBalance += achievement.reward;
                showAchievement(`–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ!`, `${achievement.name} (+${achievement.reward} ‚≠ê)`);
                updateBalanceDisplay();
            }
        });
    }

    function updateCaseInfo() {
        const caseType = STATE.currentCaseType;
        const casePrice = STATE.caseTypes[caseType].price;
        const caseName = STATE.caseTypes[caseType].name;

        if (UI.caseTitleElement) UI.caseTitleElement.textContent = `${caseName} –∫–µ–π—Å`;
        if (UI.casePriceElement) UI.casePriceElement.textContent = `‚≠ê ${casePrice}`;
        if (UI.spinCaseTitleElement) UI.spinCaseTitleElement.textContent = `${caseName} –∫–µ–π—Å`;
    }

    function switchCaseType(caseType) {
        STATE.currentCaseType = caseType;
        updateCaseInfo();
        updatePriceMessage();
        populateCasePreview();

        // Update active button
        document.querySelectorAll('.case-type-btn').forEach(btn => {
            btn.classList.toggle('active', btn.dataset.case === caseType);
        });
    }

    function showModal(modal) {
        if(viewId === 'tower-view') {
            resetTowerGame();
        }
        if(viewId === 'crash-view') {
            initCrashGame();
        }
        if(viewId === 'blackjack-view') {
            resetBlackjackGame();
        }
    }

    function renderInventory() {
    }

    function updatePriceMessage() {
        const casePrice = STATE.caseTypes[STATE.currentCaseType].price;
        const totalCost = casePrice * STATE.openQuantity;
        if (STATE.userBalance >= totalCost) {
            UI.priceCheckMessage.innerHTML = `‚≠ê ${totalCost.toLocaleString('uk-UA')}`;
            UI.priceCheckMessage.classList.remove('error');
        } else {
            UI.priceCheckMessage.innerHTML = `‚≠ê ${totalCost.toLocaleString('uk-UA')} (–Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç ${(totalCost - STATE.userBalance).toLocaleString('uk-UA')})`;
            UI.priceCheckMessage.classList.add('error');
        }
    }

    function startSpinProcess() {
        if (STATE.isSpinning) return;
        const casePrice = STATE.caseTypes[STATE.currentCaseType].price;
        const totalCost = casePrice * STATE.openQuantity;
        if (STATE.userBalance < totalCost) return;

        STATE.isSpinning = true;
        STATE.userBalance -= totalCost;
        STATE.fastOpen = document.getElementById('fast-open-checkbox')?.checked || false;
        updateBalanceDisplay();
        hideModal(UI.preOpenModal);

        const wonItems = [];
        for (let i = 0; i < STATE.openQuantity; i++) {
            const winnerData = getRandomItemByRarity();
            wonItems.push({ ...winnerData, uniqueId: Date.now() + i });
        }

        STATE.lastWonItems = wonItems;
        STATE.inventory.push(...wonItems);
        STATE.gameHistory.push(...wonItems.map(item => ({ ...item, date: new Date() })));

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        STATE.stats.totalOpened += STATE.openQuantity;
        const totalValue = wonItems.reduce((sum, item) => sum + item.value, 0);
        STATE.stats.totalWon += totalValue;
        if (totalValue > STATE.stats.biggestWin) {
            STATE.stats.biggestWin = totalValue;
        }

        addExperience(STATE.openQuantity * 10);
        checkAchievements();
        updateProfileStats();

        UI.caseView.classList.add('hidden');
        UI.spinView.classList.remove('hidden');

        if (STATE.fastOpen) {
            // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ
            setTimeout(() => showResult(), 500);
        } else if (STATE.openQuantity > 1) {
            startMultiVerticalAnimation();
        } else {
            startHorizontalAnimation();
        }
    }

    function getRandomItemByRarity() {
        const caseType = STATE.currentCaseType;
        let rarityChances = {};

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∞–Ω—Å–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–µ–π—Å–∞
        switch (caseType) {
            case 'common':
                rarityChances = { common: 60, rare: 30, epic: 9, legendary: 1 };
                break;
            case 'rare':
                rarityChances = { common: 40, rare: 40, epic: 18, legendary: 2 };
                break;
            case 'epic':
                rarityChances = { common: 20, rare: 35, epic: 35, legendary: 10 };
                break;
            case 'legendary':
                rarityChances = { common: 10, rare: 20, epic: 40, legendary: 30 };
                break;
        }

        const random = Math.random() * 100;
        let cumulative = 0;

        for (const [rarity, chance] of Object.entries(rarityChances)) {
            cumulative += chance;
            if (random <= cumulative) {
                const items = STATE.possibleItems[rarity];
                return items[Math.floor(Math.random() * items.length)];
            }
        }

        // Fallback
        return STATE.possibleItems.common[0];
    }

    function startHorizontalAnimation() {
        UI.spinnerContainer.classList.remove('hidden');
        UI.multiSpinnerContainer.classList.add('hidden');
    }

    function populateCasePreview() {
        if (!UI.caseContentsPreview) return;
        UI.caseContentsPreview.innerHTML = '';

        const allItems = [];
        Object.values(STATE.possibleItems).forEach(rarityItems => {
            allItems.push(...rarityItems);
        });

        allItems.sort((a, b) => b.value - a.value).forEach(item => {
            const itemEl = document.createElement('div');
            itemEl.classList.add('preview-item');
            itemEl.classList.add(`rarity-${item.rarity}`);
            itemEl.innerHTML = `<img src="${item.imageSrc}" alt="${item.name}"><div class="inventory-item-price">‚≠ê ${item.value.toLocaleString('uk-UA')}</div>`;
            UI.caseContentsPreview.appendChild(itemEl);
        });
    }

    // --- –ö–û–ù–ï–¶ –õ–û–ì–ò–ö–ò –ê–ü–ì–†–ï–ô–î–ê ---
    // --- –õ–û–ì–ò–ö–ê –ò–ì–†–´ –ö–†–ê–® ---
    function initCrashGame() {
        STATE.crashState = {
            isActive: false,
            bet: 100,
            autoCashout: 2.0,
            currentMultiplier: 1.0,
            hasPlacedBet: false,
            gameStartTime: 0,
            history: [...STATE.crashState.history] || []
        };

        updateCrashUI();
        renderCrashHistory();

        if (!STATE.crashState.isActive && !STATE.crashState.hasPlacedBet) {
            startCrashRound();
        }
    }

    function startCrashRound() {
        STATE.crashState.isActive = true;
        STATE.crashState.currentMultiplier = 1.0;
        STATE.crashState.gameStartTime = Date.now();

        const crashMultiplier = generateCrashMultiplier();
        updateCrashStatus('–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!');

        const updateInterval = setInterval(() => {
            if (!STATE.crashState.isActive) {
                clearInterval(updateInterval);
                return;
            }

            const elapsed = (Date.now() - STATE.crashState.gameStartTime) / 1000;
            STATE.crashState.currentMultiplier = 1 + elapsed * 0.1;

            updateCrashMultiplier();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ–≤—ã–≤–æ–¥
            if (STATE.crashState.hasPlacedBet && 
                STATE.crashState.currentMultiplier >= STATE.crashState.autoCashout) {
                cashoutCrash();
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∞—à
            if (STATE.crashState.currentMultiplier >= crashMultiplier) {
                endCrashRound(crashMultiplier);
                clearInterval(updateInterval);
            }
        }, 100);
    }

    function generateCrashMultiplier() {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        const random = Math.random();
        if (random < 0.5) return 1.0 + Math.random() * 1.0; // 1.0-2.0 (50%)
        if (random < 0.8) return 2.0 + Math.random() * 3.0; // 2.0-5.0 (30%)
        if (random < 0.95) return 5.0 + Math.random() * 10.0; // 5.0-15.0 (15%)
        return 15.0 + Math.random() * 85.0; // 15.0-100.0 (5%)
    }

    function placeCrashBet() {
        const bet = parseInt(document.getElementById('crash-bet-input')?.value || 100);
        const autoCashout = parseFloat(document.getElementById('crash-auto-cashout')?.value || 2.0);

        if (STATE.userBalance < bet) {
            showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!');
            return;
        }

        if (STATE.crashState.hasPlacedBet) {
            showNotification('–°—Ç–∞–≤–∫–∞ —É–∂–µ —Å–¥–µ–ª–∞–Ω–∞!');
            return;
        }

        STATE.userBalance -= bet;
        STATE.crashState.bet = bet;
        STATE.crashState.autoCashout = autoCashout;
        STATE.crashState.hasPlacedBet = true;

        updateBalanceDisplay();
        updateCrashUI();
        showNotification(`–°—Ç–∞–≤–∫–∞ ${bet} ‚≠ê –ø—Ä–∏–Ω—è—Ç–∞!`);
    }

    function cashoutCrash() {
        if (!STATE.crashState.hasPlacedBet || !STATE.crashState.isActive) return;

        const winAmount = Math.floor(STATE.crashState.bet * STATE.crashState.currentMultiplier);
        STATE.userBalance += winAmount;
        STATE.crashState.hasPlacedBet = false;

        updateBalanceDisplay();
        updateCrashUI();
        showNotification(`–í—ã–∏–≥—Ä—ã—à: ${winAmount} ‚≠ê (x${STATE.crashState.currentMultiplier.toFixed(2)})`);

        STATE.gameStats.crash.total++;
        STATE.gameStats.crash.wins++;
        if (STATE.crashState.currentMultiplier > STATE.gameStats.crash.bestMultiplier) {
            STATE.gameStats.crash.bestMultiplier = STATE.crashState.currentMultiplier;
        }
        STATE.stats.totalGamesPlayed++;
        addExperience(10);
    }

    function endCrashRound(crashPoint) {
        STATE.crashState.isActive = false;
        STATE.crashState.history.unshift(crashPoint);
        if (STATE.crashState.history.length > 10) {
            STATE.crashState.history.pop();
        }

        updateCrashStatus(`–ö—Ä–∞—à –Ω–∞ x${crashPoint.toFixed(2)}!`);
        updateCrashMultiplier();
        renderCrashHistory();

        if (STATE.crashState.hasPlacedBet) {
            showNotification(`–ö—Ä–∞—à! –°—Ç–∞–≤–∫–∞ –ø–æ—Ç–µ—Ä—è–Ω–∞ –Ω–∞ x${crashPoint.toFixed(2)}`);
            STATE.crashState.hasPlacedBet = false;
            STATE.gameStats.crash.total++;
            STATE.stats.totalGamesPlayed++;
            addExperience(5);
        }

        updateCrashUI();

        // –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            if (document.getElementById('crash-view')?.classList.contains('active')) {
                startCrashRound();
            }
        }, 3000);
    }

    function updateCrashMultiplier() {
        const element = document.getElementById('crash-multiplier');
        if (element) {
            element.textContent = `${STATE.crashState.currentMultiplier.toFixed(2)}x`;
            element.style.color = STATE.crashState.currentMultiplier > 2 ? '#22c55e' : '#6366f1';
        }
    }

    function updateCrashStatus(message) {
        const element = document.getElementById('crash-status');
        if (element) element.textContent = message;
    }

    function updateCrashUI() {
        const betBtn = document.getElementById('crash-bet-btn');
        const cashoutBtn = document.getElementById('crash-cashout-btn');

        if (betBtn) {
            betBtn.disabled = STATE.crashState.hasPlacedBet || !STATE.crashState.isActive;
            betBtn.textContent = STATE.crashState.hasPlacedBet ? '–°—Ç–∞–≤–∫–∞ —Å–¥–µ–ª–∞–Ω–∞' : '–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É';
        }

        if (cashoutBtn) {
            cashoutBtn.classList.toggle('hidden', !STATE.crashState.hasPlacedBet);
            if (STATE.crashState.hasPlacedBet) {
                const winAmount = Math.floor(STATE.crashState.bet * STATE.crashState.currentMultiplier);
                cashoutBtn.textContent = `–í—ã–≤–µ—Å—Ç–∏ ${winAmount} ‚≠ê`;
            }
        }
    }

    function renderCrashHistory() {
        const container = document.getElementById('crash-history-list');
        if (!container) return;

        container.innerHTML = '';
        STATE.crashState.history.forEach(multiplier => {
            const item = document.createElement('div');
            item.className = 'crash-history-item';
            item.textContent = `${multiplier.toFixed(2)}x`;

            if (multiplier < 2) item.classList.add('low');
            else if (multiplier < 5) item.classList.add('medium');
            else if (multiplier < 10) item.classList.add('high');
            else item.classList.add('jackpot');

            container.appendChild(item);
        });
    }
    // --- –ö–û–ù–ï–¶ –õ–û–ì–ò–ö–ò –ö–†–ê–® ---
    // --- –õ–û–ì–ò–ö–ê –ë–õ–≠–ö–î–ñ–ï–ö–ê ---
    function resetBlackjackGame() {
        STATE.blackjackState = {
            isActive: false,
            bet: 100,
            playerCards: [],
            dealerCards: [],
            playerScore: 0,
            dealerScore: 0,
            gamePhase: 'betting',
            canDouble: false,
            deck: []
        };
        updateBlackjackUI();
    }

    function createDeck() {
        const suits = ['‚ô†', '‚ô•', '‚ô¶', '‚ô£'];
        const values = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K'];
        const deck = [];

        for (const suit of suits) {
            for (const value of values) {
                deck.push({ suit, value, numericValue: getCardValue(value) });
            }
        }

        // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∫–æ–ª–æ–¥—É
        for (let i = deck.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [deck[i], deck[j]] = [deck[j], deck[i]];
        }

        return deck;
    }

    function getCardValue(value) {
        if (value === 'A') return 11;
        if (['K', 'Q', 'J'].includes(value)) return 10;
        return parseInt(value);
    }

    function calculateScore(cards) {
        let score = 0;
        let aces = 0;

        for (const card of cards) {
            if (card.value === 'A') {
                aces++;
                score += 11;
            } else {
                score += card.numericValue;
            }
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—É–∑—ã
        while (score > 21 && aces > 0) {
            score -= 10;
            aces--;
        }

        return score;
    }

    function startBlackjackGame() {
        const bet = parseInt(document.getElementById('blackjack-bet-input')?.value || 100);

        if (STATE.userBalance < bet) {
            showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!');
            return;
        }

        STATE.userBalance -= bet;
        STATE.blackjackState.bet = bet;
        STATE.blackjackState.deck = createDeck();
        STATE.blackjackState.playerCards = [];
        STATE.blackjackState.dealerCards = [];
        STATE.blackjackState.gamePhase = 'playing';
        STATE.blackjackState.canDouble = true;

        // –†–∞–∑–¥–∞–µ–º –∫–∞—Ä—Ç—ã
        dealCard('player');
        dealCard('dealer');
        dealCard('player');
        dealCard('dealer', true); // –í—Ç–æ—Ä–∞—è –∫–∞—Ä—Ç–∞ –¥–∏–ª–µ—Ä–∞ —Å–∫—Ä—ã—Ç–∞
        updateBalanceDisplay();
        updateBlackjackUI();
        renderBlackjackCards();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª—ç–∫–¥–∂–µ–∫
        if (STATE.blackjackState.playerScore === 21) {
            endBlackjackGame('blackjack');
        }
    }

    function dealCard(target, hidden = false) {
        const card = STATE.blackjackState.deck.pop();
        card.hidden = hidden;

        if (target === 'player') {
            STATE.blackjackState.playerCards.push(card);
            STATE.blackjackState.playerScore = calculateScore(STATE.blackjackState.playerCards);
        } else {
            STATE.blackjackState.dealerCards.push(card);
            // –°—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–∏–¥–∏–º—ã–µ –∫–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞
            const visibleCards = STATE.blackjackState.dealerCards.filter(c => !c.hidden);
            STATE.blackjackState.dealerScore = calculateScore(visibleCards);
        }
    }

    function hitBlackjack() {
        if (STATE.blackjackState.gamePhase !== 'playing') return;

        dealCard('player');
        STATE.blackjackState.canDouble = false;
        renderBlackjackCards();
        updateBlackjackUI();

        if (STATE.blackjackState.playerScore > 21) {
            endBlackjackGame('bust');
        }
    }

    function standBlackjack() {
        if (STATE.blackjackState.gamePhase !== 'playing') return;

        STATE.blackjackState.gamePhase = 'dealer';

        // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∫—Ä—ã—Ç—É—é –∫–∞—Ä—Ç—É –¥–∏–ª–µ—Ä–∞
        STATE.blackjackState.dealerCards.forEach(card => card.hidden = false);
        STATE.blackjackState.dealerScore = calculateScore(STATE.blackjackState.dealerCards);

        // –î–∏–ª–µ—Ä –¥–æ–±–∏—Ä–∞–µ—Ç –∫–∞—Ä—Ç—ã
        while (STATE.blackjackState.dealerScore < 17) {
            dealCard('dealer');
        }

        renderBlackjackCards();

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if (STATE.blackjackState.dealerScore > 21) {
            endBlackjackGame('dealer-bust');
        } else if (STATE.blackjackState.dealerScore > STATE.blackjackState.playerScore) {
            endBlackjackGame('dealer-win');
        } else if (STATE.blackjackState.dealerScore < STATE.blackjackState.playerScore) {
            endBlackjackGame('player-win');
        } else {
            endBlackjackGame('push');
        }
    }

    function doubleBlackjack() {
        if (!STATE.blackjackState.canDouble || STATE.userBalance < STATE.blackjackState.bet) {
            showNotification('–ù–µ–ª—å–∑—è —É–¥–≤–æ–∏—Ç—å —Å—Ç–∞–≤–∫—É!');
            return;
        }

        STATE.userBalance -= STATE.blackjackState.bet;
        STATE.blackjackState.bet *= 2;
        updateBalanceDisplay();

        dealCard('player');
        renderBlackjackCards();

        if (STATE.blackjackState.playerScore > 21) {
            endBlackjackGame('bust');
        } else {
            standBlackjack();
        }
    }

    function endBlackjackGame(result) {
        STATE.blackjackState.gamePhase = 'finished';
        let message = '';
        let winAmount = 0;

        switch (result) {
            case 'blackjack':
                winAmount = Math.floor(STATE.blackjackState.bet * 2.5);
                message = '–ë–ª—ç–∫–¥–∂–µ–∫! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!';
                STATE.gameStats.blackjack.wins++;
                break;
            case 'player-win':
                winAmount = STATE.blackjackState.bet * 2;
                message = '–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!';
                STATE.gameStats.blackjack.wins++;
                break;
            case 'dealer-bust':
                winAmount = STATE.blackjackState.bet * 2;
                message = '–î–∏–ª–µ—Ä –ø–µ—Ä–µ–±—Ä–∞–ª! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!';
                STATE.gameStats.blackjack.wins++;
                break;
            case 'push':
                winAmount = STATE.blackjackState.bet;
                message = '–ù–∏—á—å—è!';
                break;
            case 'dealer-win':
                message = '–î–∏–ª–µ—Ä –≤—ã–∏–≥—Ä–∞–ª!';
                break;
            case 'bust':
                message = '–ü–µ—Ä–µ–±–æ—Ä! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!';
                break;
        }

        if (winAmount > 0) {
            STATE.userBalance += winAmount;
            updateBalanceDisplay();
        }

        STATE.gameStats.blackjack.total++;
        STATE.stats.totalGamesPlayed++;
        addExperience(15);

        const resultElement = document.getElementById('blackjack-result');
        if (resultElement) {
            resultElement.textContent = message;
            resultElement.className = 'game-result';
            if (winAmount > STATE.blackjackState.bet) resultElement.classList.add('win');
            else if (winAmount === STATE.blackjackState.bet) resultElement.classList.add('draw');
            else resultElement.classList.add('lose');
        }

        updateBlackjackUI();
        showNotification(message);
    }

    function renderBlackjackCards() {
        renderCards('dealer-cards', STATE.blackjackState.dealerCards);
        renderCards('player-cards', STATE.blackjackState.playerCards);

        const dealerScoreElement = document.getElementById('dealer-score');
        const playerScoreElement = document.getElementById('player-score');

        if (dealerScoreElement) dealerScoreElement.textContent = STATE.blackjackState.dealerScore;
        if (playerScoreElement) playerScoreElement.textContent = STATE.blackjackState.playerScore;
    }

    function renderCards(containerId, cards) {
        const container = document.getElementById(containerId);
        if (!container) return;

        container.innerHTML = '';
        cards.forEach(card => {
            const cardElement = document.createElement('div');
            cardElement.className = `card ${card.hidden ? 'hidden' : (card.suit === '‚ô•' || card.suit === '‚ô¶' ? 'red' : 'black')}`;
            cardElement.textContent = card.hidden ? '' : `${card.value}${card.suit}`;
            container.appendChild(cardElement);
        });
    }

    function updateBlackjackUI() {
        const dealBtn = document.getElementById('blackjack-deal-btn');
        const hitBtn = document.getElementById('blackjack-hit-btn');
        const standBtn = document.getElementById('blackjack-stand-btn');
        const doubleBtn = document.getElementById('blackjack-double-btn');

        const isPlaying = STATE.blackjackState.gamePhase === 'playing';
        const isBetting = STATE.blackjackState.gamePhase === 'betting';

        if (dealBtn) {
            dealBtn.classList.toggle('hidden', !isBetting);
        }
        if (hitBtn) {
            hitBtn.classList.toggle('hidden', !isPlaying);
        }
        if (standBtn) {
            standBtn.classList.toggle('hidden', !isPlaying);
        }
        if (doubleBtn) {
            doubleBtn.classList.toggle('hidden', !isPlaying || !STATE.blackjackState.canDouble);
        }
    }
    // --- –ö–û–ù–ï–¶ –õ–û–ì–ò–ö–ò –ë–õ–≠–ö–î–ñ–ï–ö–ê ---
    // --- –õ–û–ì–ò–ö–ê –ú–ò–ù–ï–†–ê ---
    function resetMinerGame() {
        STATE.minerState.isActive = false;
    }

    function processSlotsResult(results, bet) {
        let win = 0;
        let message = "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!";
        let multiplier = 0;

        const [r1, r2, r3] = results;

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        STATE.gameStats.slots.total++;
        STATE.stats.totalGamesPlayed++;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
        if (r1.name === r2.name && r2.name === r3.name) {
            // –í—Å–µ —Ç—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
            multiplier = r1.multiplier;
            win = bet * multiplier;
            message = `–î–ñ–ï–ö–ü–û–¢! ${r1.name} x${multiplier}!`;
            STATE.gameStats.slots.wins++;
            addExperience(25);
        } else if (r1.name === r2.name || r1.name === r3.name || r2.name === r3.name) {
            // –î–≤–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
            multiplier = 1.5;
            win = Math.floor(bet * multiplier);
            message = `–•–æ—Ä–æ—à–æ! –í—ã–∏–≥—Ä—ã—à x${multiplier}!`;
            STATE.gameStats.slots.wins++;
            addExperience(15);
        } else {
            addExperience(5);
        }

        if (win > 0) {
            STATE.userBalance += win;
            updateBalanceDisplay();
            UI.slotsPayline.classList.add('visible');
            showNotification(message + ` (+${win} ‚≠ê)`);
        } else {
             showNotification(message);
        }

        STATE.slotsState.isSpinning = false;
        UI.slotsSpinBtn.disabled = false;
    }

    function handleSlotsMaxBet() {
        const maxBet = Math.min(STATE.userBalance, 1000);
        UI.slotsBetInput.value = maxBet;
    }
    // --- –ö–û–ù–ï–¶ –õ–û–ì–ò–ö–ò –°–õ–û–¢–û–í ---
    // --- –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –í–ï–ñ–ò (TOWER) ---
    function handleCoinflip(playerChoice) {
        if (STATE.coinflipState.isFlipping) return;

        const bet = parseInt(UI.coinflipBetInput.value);
        if (isNaN(bet) || bet <= 0 || bet > STATE.userBalance) {
            showNotification('–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç–∞–≤–∫–∞!');
            return;
        }

        STATE.userBalance -= bet;
        updateBalanceDisplay();

        STATE.coinflipState.isFlipping = true;
        UI.coinflipResult.textContent = '';

        const result = Math.random() < 0.485 ? playerChoice : (playerChoice === 'heads' ? 'tails' : 'heads');

        const handleFlipEnd = () => {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            STATE.gameStats.coinflip.total++;
            STATE.stats.totalGamesPlayed++;

            // –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if (playerChoice === result) {
                const winAmount = Math.floor(bet * 1.9);
                STATE.userBalance += winAmount;
                STATE.gameStats.coinflip.wins++;
                UI.coinflipResult.textContent = `–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${winAmount} ‚≠ê!`;
                showNotification(`–ü–æ–±–µ–¥–∞! +${winAmount} ‚≠ê`);
                addExperience(10);
            } else {
                UI.coinflipResult.textContent = `–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ ${bet} ‚≠ê.`;
                showNotification(`–ü—Ä–æ–∏–≥—Ä—ã—à! -${bet} ‚≠ê`);
                addExperience(5);
            }
            updateBalanceDisplay();
            updateCoinflipStats();
            STATE.coinflipState.isFlipping = false;

            // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å transform –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∞–Ω–∏–º–∞—Ü–∏–∏ –±–µ–∑ –≤–∏–¥–∏–º–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
            UI.coin.style.transition = 'none';
            if (result === 'heads') {
                UI.coin.style.transform = 'rotateY(0deg)';
            } else {
                UI.coin.style.transform = 'rotateY(180deg)';
            }
        };

        function updateCoinflipStats() {
            const totalElement = document.getElementById('coinflip-total-games');
            const winsElement = document.getElementById('coinflip-wins');
            const winRateElement = document.getElementById('coinflip-win-rate');

            if (totalElement) totalElement.textContent = STATE.gameStats.coinflip.total;
            if (winsElement) winsElement.textContent = STATE.gameStats.coinflip.wins;
            if (winRateElement) {
                const winRate = STATE.gameStats.coinflip.total > 0 
                    ? ((STATE.gameStats.coinflip.wins / STATE.gameStats.coinflip.total) * 100).toFixed(1)
                    : '0';
                winRateElement.textContent = `${winRate}%`;
            }
        }

        UI.coin.addEventListener('transitionend', handleFlipEnd, { once: true });

        // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å transition –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –≤—Ä–∞—â–µ–Ω–∏—è
    }

    function handleRps(playerChoice) {
        if (STATE.rpsState.isPlaying) return;

        const bet = parseInt(UI.rpsBetInput.value);
        if (isNaN(bet) || bet <= 0 || bet > STATE.userBalance) {
            showNotification('–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç–∞–≤–∫–∞!');
            return;
        }

        STATE.userBalance -= bet;
        updateBalanceDisplay();

        STATE.rpsState.isPlaying = true;
        UI.rpsButtons.forEach(button => button.disabled = true);

        const choices = ['rock', 'paper', 'scissors'];
        const computerChoice = choices[Math.floor(Math.random() * choices.length)];

        const choiceMap = {
            rock: 'üóø',
            paper: 'üìÑ',
            scissors: '‚úÇÔ∏è'
        };

        UI.rpsPlayerChoice.textContent = choiceMap[playerChoice];
        UI.rpsComputerChoice.classList.add('spinning');

        const spinInterval = setInterval(() => {
            const randomChoice = choices[Math.floor(Math.random() * choices.length)];
            UI.rpsComputerChoice.textContent = choiceMap[randomChoice];
        }, 100);

        setTimeout(() => {
            clearInterval(spinInterval);
            UI.rpsComputerChoice.classList.remove('spinning');
            UI.rpsComputerChoice.textContent = choiceMap[computerChoice];

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            STATE.gameStats.rps.total++;
            STATE.stats.totalGamesPlayed++;

            let resultMessage = '';
            if (playerChoice === computerChoice) {
                resultMessage = "–ù–∏—á—å—è!";
                STATE.userBalance += bet; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–≤–∫—É
                STATE.gameStats.rps.draws++;
                showNotification(`–ù–∏—á—å—è! –°—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞`);
                addExperience(5);
            } else if (
                (playerChoice === 'rock' && computerChoice === 'scissors') ||
                (playerChoice === 'paper' && computerChoice === 'rock') ||
                (playerChoice === 'scissors' && computerChoice === 'paper')
            ) {
                const winAmount = Math.floor(bet * 1.8);
                resultMessage = `–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${winAmount} ‚≠ê!`;
                STATE.userBalance += winAmount;
                STATE.gameStats.rps.wins++;
                showNotification(`–ü–æ–±–µ–¥–∞! +${winAmount} ‚≠ê`);
                addExperience(15);
            } else {
                resultMessage = `–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ ${bet} ‚≠ê.`;
                showNotification(`–ü—Ä–æ–∏–≥—Ä—ã—à! -${bet} ‚≠ê`);
                addExperience(5);
            }

            updateBalanceDisplay();
            updateRpsStats();
            UI.rpsResultMessage.textContent = resultMessage;

            // Reset after a delay
            setTimeout(() => {
                UI.rpsResultMessage.textContent = '–°–¥–µ–ª–∞–π—Ç–µ –≤—ã–±–æ—Ä';
                UI.rpsPlayerChoice.textContent = 'ü§î';
                UI.rpsComputerChoice.textContent = 'ü§î';
                STATE.rpsState.isPlaying = false;
                UI.rpsButtons.forEach(button => button.disabled = false);
            }, 2000);
        }, 4500); // Spin for 2 seconds
    }

    function updateRpsStats() {
        const totalElement = document.getElementById('rps-total-games');
        const winsElement = document.getElementById('rps-wins');
        const drawsElement = document.getElementById('rps-draws');

        if (totalElement) totalElement.textContent = STATE.gameStats.rps.total;
        if (winsElement) winsElement.textContent = STATE.gameStats.rps.wins;
        if (drawsElement) drawsElement.textContent = STATE.gameStats.rps.draws;
    }
    // --- –ö–û–ù–ï–¶ –õ–û–ì–ò–ö–ò –ö–ê–ú–ï–ù–¨-–ù–û–ñ–ù–ò–¶–´-–ë–£–ú–ê–ì–ê ---
    // --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –°–õ–û–¢–û–í ---
    if (UI.slotsSpinBtn) UI.slotsSpinBtn.addEventListener('click', handleSlotsSpin);
    const slotsMaxBetBtn = document.getElementById('slots-max-bet-btn');
    if (slotsMaxBetBtn) slotsMaxBetBtn.addEventListener('click', handleSlotsMaxBet);

    // --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –í–ï–ñ–ò ---
    if (UI.towerStartBtn) UI.towerStartBtn.addEventListener('click', startTowerGame);

    UI.rpsButtons.forEach(button => {
        button.addEventListener('click', () => handleRps(button.dataset.choice));
    });

    // --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ö–†–ê–® ---
    const crashBetBtn = document.getElementById('crash-bet-btn');
    const crashCashoutBtn = document.getElementById('crash-cashout-btn');
    if (crashBetBtn) crashBetBtn.addEventListener('click', placeCrashBet);
    if (crashCashoutBtn) crashCashoutBtn.addEventListener('click', cashoutCrash);

    // --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ë–õ–≠–ö–î–ñ–ï–ö–ê ---
    const blackjackDealBtn = document.getElementById('blackjack-deal-btn');
    const blackjackHitBtn = document.getElementById('blackjack-hit-btn');
    const blackjackStandBtn = document.getElementById('blackjack-stand-btn');
    const blackjackDoubleBtn = document.getElementById('blackjack-double-btn');

    if (blackjackDealBtn) blackjackDealBtn.addEventListener('click', startBlackjackGame);
    if (blackjackHitBtn) blackjackHitBtn.addEventListener('click', hitBlackjack);
    if (blackjackStandBtn) blackjackStandBtn.addEventListener('click', standBlackjack);
    if (blackjackDoubleBtn) blackjackDoubleBtn.addEventListener('click', doubleBlackjack);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ UI
    UI.userBalanceElement = document.getElementById('user-balance');
    UI.userGemsElement = document.getElementById('user-gems');
    UI.userLevelElement = document.getElementById('user-level');
    UI.caseTitleElement = document.getElementById('case-title');
    UI.casePriceElement = document.getElementById('case-price');
    UI.spinCaseTitleElement = document.getElementById('spin-case-title');
    UI.achievementToast = document.getElementById('achievement-toast');
    UI.totalOpenedElement = document.getElementById('total-opened');
    UI.totalWonElement = document.getElementById('total-won');
    UI.biggestWinElement = document.getElementById('biggest-win');
    UI.profileLevelElement = document.getElementById('profile-level');
    UI.profileExpElement = document.getElementById('profile-exp');
    UI.profileExpMaxElement = document.getElementById('profile-exp-max');
    UI.profileExpBar = document.getElementById('profile-exp-bar');

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –∫–µ–π—Å–æ–≤
    document.querySelectorAll('.case-type-btn').forEach(btn => {
        btn.addEventListener('click', () => switchCaseType(btn.dataset.case));
    });

    // === –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞
    function initShop() {
        const shopItems = {
            boosters: [
                { id: 1, name: '–£–¥–∞—á–ª–∏–≤—ã–π —á–∞—Å', price: 500, currency: 'stars', description: '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —à–∞–Ω—Å —Ä–µ–¥–∫–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–∞ 1 —á–∞—Å' },
                { id: 2, name: '–î–≤–æ–π–Ω–æ–π XP', price: 300, currency: 'stars', description: '–£–¥–≤–∞–∏–≤–∞–µ—Ç –ø–æ–ª—É—á–∞–µ–º—ã–π –æ–ø—ã—Ç –Ω–∞ 30 –º–∏–Ω—É—Ç' },
                { id: 3, name: '–ú–∞–≥–Ω–∏—Ç –º–æ–Ω–µ—Ç', price: 10, currency: 'gems', description: '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –≤—ã–∏–≥—Ä—ã—à–∏ –Ω–∞ 25% –Ω–∞ 1 —á–∞—Å' }
            ],
            cosmetics: [
                { id: 4, name: '–ó–æ–ª–æ—Ç–∞—è —Ä–∞–º–∫–∞', price: 1000, currency: 'stars', description: '–£–∫—Ä–∞—à–∞–µ—Ç –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å' },
                { id: 5, name: '–ü—Ä–µ–º–∏—É–º –∞–≤–∞—Ç–∞—Ä', price: 50, currency: 'gems', description: '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–∞—è —Ä–∞–º–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞' }
            ],
            premium: [
                { id: 6, name: 'VIP —Å—Ç–∞—Ç—É—Å (7 –¥–Ω–µ–π)', price: 100, currency: 'gems', description: '–í—Å–µ –±–æ–Ω—É—Å—ã + —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –∫–µ–π—Å—ã' },
                { id: 7, name: '–ü—Ä–µ–º–∏—É–º –ø—Ä–æ–ø—É—Å–∫', price: 2000, currency: 'stars', description: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã' }
            ]
        };

        renderShopTab('boosters', shopItems.boosters);
    }

    function renderShopTab(tabName, items) {
        const content = document.getElementById('shop-content');
        if (!content) return;

        content.innerHTML = '';
        items.forEach(item => {
            const itemEl = document.createElement('div');
            itemEl.className = 'shop-item';
            itemEl.innerHTML = `
                <img src="diamond.png" alt="${item.name}">
                <div class="shop-item-name">${item.name}</div>
                <div class="shop-item-description">${item.description}</div>
                <div class="shop-item-price">${item.currency === 'gems' ? 'üíé' : '‚≠ê'} ${item.price}</div>
                <button class="primary-button" onclick="buyShopItem(${item.id}, ${item.price}, '${item.currency}')">–ö—É–ø–∏—Ç—å</button>
            `;
            content.appendChild(itemEl);
        });
    }

    window.buyShopItem = function(itemId, price, currency) {
        const canAfford = currency === 'gems' ? STATE.userGems >= price : STATE.userBalance >= price;

        if (!canAfford) {
            showNotification(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ${currency === 'gems' ? '–≥–µ–º–æ–≤' : '–∑–≤–µ–∑–¥'}!`);
            return;
        }

        if (currency === 'gems') {
            STATE.userGems -= price;
        } else {
            STATE.userBalance -= price;
        }

        updateBalanceDisplay();
        showNotification('–ü–æ–∫—É–ø–∫–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞!');
    };

    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    function renderAchievements() {
        const container = document.getElementById('achievements-list');
        if (!container) return;

        container.innerHTML = '';
        STATE.achievements.forEach(achievement => {
            const achEl = document.createElement('div');
            achEl.className = `achievement ${achievement.completed ? 'completed' : ''}`;
            achEl.innerHTML = `
                <div class="achievement-icon">${achievement.completed ? 'üèÜ' : 'üîí'}</div>
                <div class="achievement-info">
                    <div class="achievement-name">${achievement.name}</div>
                    <div class="achievement-description">${achievement.description}</div>
                    <div class="achievement-reward">–ù–∞–≥—Ä–∞–¥–∞: ${achievement.reward} ‚≠ê</div>
                </div>
            `;
            container.appendChild(achEl);
        });
    }

    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
    function renderDailyTasks() {
        const container = document.getElementById('daily-tasks-list');
        if (!container) return;

        container.innerHTML = '';
        STATE.dailyTasks.forEach(task => {
            const taskEl = document.createElement('div');
            taskEl.className = `daily-task ${task.completed ? 'completed' : ''}`;
            taskEl.innerHTML = `
                <div class="task-info">
                    <div class="task-name">${task.name}</div>
                    <div class="task-progress">${task.progress}/${task.target}</div>
                    <div class="task-reward">–ù–∞–≥—Ä–∞–¥–∞: ${task.reward} ‚≠ê</div>
                </div>
                <div class="task-progress-bar">
                    <div class="task-progress-fill" style="width: ${(task.progress / task.target * 100)}%"></div>
                </div>
                ${task.completed ? '<button class="secondary-button" disabled>–í—ã–ø–æ–ª–Ω–µ–Ω–æ</button>' : 
                    task.progress >= task.target ? '<button class="primary-button" onclick="claimTask(' + task.id + ')">–ó–∞–±—Ä–∞—Ç—å</button>' : 
                    '<button class="secondary-button" disabled>–í –ø—Ä–æ—Ü–µ—Å—Å–µ</button>'}
            `;
            container.appendChild(taskEl);
        });
    }

    window.claimTask = function(taskId) {
        const task = STATE.dailyTasks.find(t => t.id === taskId);
        if (!task || task.completed || task.progress < task.target) return;

        task.completed = true;
        STATE.userBalance += task.reward;
        updateBalanceDisplay();
        showNotification(`–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! +${task.reward} ‚≠ê`);
        renderDailyTasks();
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–∞–±–æ–≤ –º–∞–≥–∞–∑–∏–Ω–∞
    document.querySelectorAll('.shop-tab-btn').forEach(btn => {
        btn.addEventListener('click', () => {
            document.querySelectorAll('.shop-tab-btn').forEach(b => b.classList.remove('active'));
            btn.classList.add('active');

            const tab = btn.dataset.tab;
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –º–∞–≥–∞–∑–∏–Ω–∞
        });
    });

    // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    loadTelegramData();
    updateBalanceDisplay();
    updateCaseInfo();
    updateProfileStats();
    switchView('game-view');
    populateCasePreview();
    initShop();
    renderAchievements();
    renderDailyTasks();
    updateCoinflipStats();
    updateRpsStats();
    setInterval(updateTimer, 1000);
});