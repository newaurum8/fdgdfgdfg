from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from typing import List, Optional
from config import Config

class Keyboards:
    
    @staticmethod
    def main_menu() -> ReplyKeyboardMarkup:
        """Main menu keyboard"""
        keyboard = [
            ["üì¢ –°–¥–µ–ª–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", "üí¨ –ß–∞—Ç—ã"],
            ["üë§ –ü—Ä–æ—Ñ–∏–ª—å", "üìò FAQ"],
            ["üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞"]
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    
    @staticmethod
    def announcement_types() -> InlineKeyboardMarkup:
        """Announcement types selection"""
        keyboard = [
            [InlineKeyboardButton("‚ñ∂Ô∏è –°–¥–µ–ª–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", callback_data="announce_create")],
            [InlineKeyboardButton("üîç –ù–∞–π—Ç–∏", callback_data="announce_search")],
            [InlineKeyboardButton("üì£ –ê—É–∫—Ü–∏–æ–Ω", callback_data="announce_auction")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def sell_or_buy() -> InlineKeyboardMarkup:
        """Sell or buy selection"""
        keyboard = [
            [InlineKeyboardButton("üí∞ –ü—Ä–æ–¥–∞—Ç—å", callback_data="type_sell")],
            [InlineKeyboardButton("üõí –ö—É–ø–∏—Ç—å", callback_data="type_buy")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_announce")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def price_type() -> InlineKeyboardMarkup:
        """Price type selection"""
        keyboard = [
            [InlineKeyboardButton("üíµ –£–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—É", callback_data="price_fixed")],
            [InlineKeyboardButton("üí¨ –î–æ–≥–æ–≤–æ—Ä–Ω–∞—è", callback_data="price_negotiable")],
            [InlineKeyboardButton("üÜì –ë–µ–∑ —Ü–µ–Ω—ã", callback_data="price_none")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_step")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def yes_no(yes_callback: str, no_callback: str) -> InlineKeyboardMarkup:
        """Generic yes/no keyboard"""
        keyboard = [
            [InlineKeyboardButton("‚úÖ –î–∞", callback_data=yes_callback)],
            [InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data=no_callback)]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def post_actions(post_id: int) -> InlineKeyboardMarkup:
        """Actions for a post"""
        keyboard = [
            [InlineKeyboardButton("üîÅ –ü—Ä–æ–¥–ª–∏—Ç—å", callback_data=f"extend_post_{post_id}")],
            [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_post_{post_id}")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def auction_timer() -> InlineKeyboardMarkup:
        """Auction timer selection"""
        keyboard = []
        for timer in Config.AUCTION_TIMERS:
            if timer < 60:
                label = f"{timer} –º–∏–Ω"
            else:
                label = f"{timer // 60} —á–∞—Å"
            keyboard.append([InlineKeyboardButton(label, callback_data=f"timer_{timer}")])
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_step")])
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def open_in_bot(post_unique_id: str) -> InlineKeyboardMarkup:
        """Open in bot button for channel posts"""
        keyboard = [
            [InlineKeyboardButton("üì© –û—Ç–∫—Ä—ã—Ç—å –≤ –±–æ—Ç–µ", url=f"https://t.me/{Config.BOT_TOKEN.split(':')[0]}?start=post_{post_unique_id}")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def contact_seller(chat_id: int) -> InlineKeyboardMarkup:
        """Contact seller button"""
        keyboard = [
            [InlineKeyboardButton("üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º", callback_data=f"contact_{chat_id}")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def chat_actions(chat_id: int) -> InlineKeyboardMarkup:
        """Chat action buttons"""
        keyboard = [
            [InlineKeyboardButton("ü§ù –ù–∞—á–∞—Ç—å —Å–¥–µ–ª–∫—É", callback_data=f"start_transaction_{chat_id}")],
            [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å —á–∞—Ç", callback_data=f"close_chat_{chat_id}")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def transaction_actions(transaction_id: int) -> InlineKeyboardMarkup:
        """Transaction action buttons"""
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ", callback_data=f"confirm_transaction_{transaction_id}")],
            [InlineKeyboardButton("‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —Å–¥–µ–ª–∫–∏", callback_data=f"cancel_transaction_{transaction_id}")],
            [InlineKeyboardButton("üÜò –ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å", callback_data=f"help_transaction_{transaction_id}")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def commission_split() -> InlineKeyboardMarkup:
        """Commission payment options"""
        keyboard = [
            [InlineKeyboardButton("ü§µ –ü—Ä–æ–¥–∞–≤–µ—Ü –ø–ª–∞—Ç–∏—Ç", callback_data="commission_seller")],
            [InlineKeyboardButton("üõí –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –ø–ª–∞—Ç–∏—Ç", callback_data="commission_buyer")],
            [InlineKeyboardButton("‚öñÔ∏è –ü–æ—Ä–æ–≤–Ω—É (50/50)", callback_data="commission_split")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_step")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def payment_methods() -> InlineKeyboardMarkup:
        """Payment method selection"""
        keyboard = [
            [InlineKeyboardButton("üí≥ UA-–∫–∞—Ä—Ç–∞", callback_data="payment_ua_card")],
            [InlineKeyboardButton("‚Çø –ö—Ä–∏–ø—Ç–∞ (TON)", callback_data="payment_crypto_ton")],
            [InlineKeyboardButton("üí∞ –ö—Ä–∏–ø—Ç–∞ (USDT)", callback_data="payment_crypto_usdt")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_step")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def rating_keyboard() -> InlineKeyboardMarkup:
        """Rating selection 1-5"""
        keyboard = []
        for i in range(1, 6):
            stars = "‚≠ê" * i
            keyboard.append([InlineKeyboardButton(f"{stars} {i}", callback_data=f"rating_{i}")])
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def admin_user_actions(user_id: int) -> InlineKeyboardMarkup:
        """Admin actions for user management"""
        keyboard = [
            [InlineKeyboardButton("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"admin_ban_{user_id}")],
            [InlineKeyboardButton("‚ö†Ô∏è –ü–æ–º–µ—Ç–∏—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º", callback_data=f"admin_suspicious_{user_id}")],
            [InlineKeyboardButton("‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"admin_unban_{user_id}")],
            [InlineKeyboardButton("üí∞ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data=f"admin_balance_{user_id}")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"admin_stats_{user_id}")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def admin_transaction_actions(transaction_id: int) -> InlineKeyboardMarkup:
        """Admin actions for transaction management"""
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –≤—ã–ø–ª–∞—Ç–∏—Ç—å", callback_data=f"admin_confirm_{transaction_id}")],
            [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_reject_{transaction_id}")],
            [InlineKeyboardButton("‚è∞ –ü—Ä–æ–¥–ª–∏—Ç—å –≤—Ä–µ–º—è", callback_data=f"admin_extend_{transaction_id}")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def auction_actions(post_id: int) -> InlineKeyboardMarkup:
        """Auction management buttons"""
        keyboard = [
            [InlineKeyboardButton("üí∞ –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É", callback_data=f"auction_bid_{post_id}")],
            [InlineKeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∞—É–∫—Ü–∏–æ–Ω", callback_data=f"auction_end_{post_id}")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def bid_actions(bid_id: int) -> InlineKeyboardMarkup:
        """Bid management buttons"""
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"bid_accept_{bid_id}")],
            [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"bid_reject_{bid_id}")],
            [InlineKeyboardButton("üë§ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data=f"bid_profile_{bid_id}")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def games_pagination(games: List, page: int = 0, page_size: int = 8) -> InlineKeyboardMarkup:
        """Paginated games selection"""
        keyboard = []
        start_idx = page * page_size
        end_idx = start_idx + page_size
        
        # Add game buttons
        for i in range(start_idx, min(end_idx, len(games))):
            game = games[i]
            keyboard.append([InlineKeyboardButton(game.name, callback_data=f"game_{game.id}")])
        
        # Add pagination buttons
        nav_row = []
        if page > 0:
            nav_row.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"games_page_{page-1}"))
        if end_idx < len(games):
            nav_row.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f"games_page_{page+1}"))
        if nav_row:
            keyboard.append(nav_row)
            
        # Add "no game" option and back button
        keyboard.append([InlineKeyboardButton("üö´ –ù–µ—Ç –∏–≥—Ä—ã –≤ —Å–ø–∏—Å–∫–µ", callback_data="game_none")])
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_step")])
        
        return InlineKeyboardMarkup(keyboard)