import asyncio
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ContentType
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from datetime import datetime
import logging

from database import Database
from keyboards import Keyboards
from states import DealCreationStates, DealChatStates, DisputeStates, FindDealStates

router = Router()
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç–∞—Ö
user_chat_states = {}

class Handlers:
    def __init__(self, db: Database):
        self.db = db

    async def cmd_start(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        await state.clear()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await self.db.get_user_by_telegram_id(message.from_user.id)
        if not user:
            anonymous_id = await self.db.add_user(
                message.from_user.id,
                message.from_user.username,
                message.from_user.first_name
            )
        else:
            anonymous_id = user['anonymous_id']

        welcome_text = f"""üîí –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–Ω–æ–Ω–∏–º–Ω—ã–π –≥–∞—Ä–∞–Ω—Ç-–±–æ—Ç!

üë§ –í–∞—à –∞–Ω–æ–Ω–∏–º–Ω—ã–π ID: `{anonymous_id}`

üîê –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:
‚Ä¢ –ü–æ–ª–Ω–∞—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å - –Ω–∏–∫—Ç–æ –Ω–µ —É–≤–∏–¥–∏—Ç –≤–∞—à @username
‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å–¥–µ–ª–∫–∏ —á–µ—Ä–µ–∑ –≥–∞—Ä–∞–Ω—Ç–∞
‚Ä¢ –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —á–∞—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π

üöÄ –ù–∞—á–Ω–∏—Ç–µ —Å —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏ –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö!"""

        await message.answer(
            welcome_text,
            reply_markup=Keyboards.main_menu(),
            parse_mode="Markdown"
        )

    async def handle_main_menu(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        await state.clear()
        
        if message.text == "üíº –ú–æ–∏ —Å–¥–µ–ª–∫–∏":
            await self.show_my_deals(message)
        elif message.text == "üÜï –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É":
            await self.start_deal_creation(message, state)
        elif message.text == "üîç –ù–∞–π—Ç–∏ —Å–¥–µ–ª–∫—É":
            await self.start_find_deal(message, state)
        elif message.text == "üìä –ü—Ä–æ—Ñ–∏–ª—å":
            await self.show_profile(message)
        elif message.text == "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è":
            await self.show_notifications(message)
        elif message.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
            await self.show_help(message)

    async def show_my_deals(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ —Å–¥–µ–ª–∫–∏"""
        user = await self.db.get_user_by_telegram_id(message.from_user.id)
        if not user:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        deals = await self.db.get_user_deals(user['anonymous_id'])
        
        if not deals:
            await message.answer(
                "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–¥–µ–ª–æ–∫.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üÜï –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!",
                reply_markup=Keyboards.main_menu()
            )
            return

        await message.answer(
            f"üìã –í–∞—à–∏ —Å–¥–µ–ª–∫–∏ ({len(deals)} —à—Ç.):\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            reply_markup=Keyboards.my_deals_filter()
        )

    async def start_deal_creation(self, message: Message, state: FSMContext):
        """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏"""
        await message.answer(
            "üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–∏\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∞–Ω–æ–Ω–∏–º–Ω—ã–π ID –ø—Ä–æ–¥–∞–≤—Ü–∞:\n"
            "üìù –§–æ—Ä–º–∞—Ç: 8 —Å–∏–º–≤–æ–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: a1b2c3d4)",
            reply_markup=Keyboards.cancel_action()
        )
        await state.set_state(DealCreationStates.waiting_seller_id)

    async def process_seller_id(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –ø—Ä–æ–¥–∞–≤—Ü–∞"""
        seller_id = message.text.strip()
        
        if len(seller_id) != 8:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID!\n"
                "ID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 8 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–∞
        seller = await self.db.get_user_by_anonymous_id(seller_id)
        if not seller:
            await message.answer(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω!\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Å–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user = await self.db.get_user_by_telegram_id(message.from_user.id)
        if user['anonymous_id'] == seller_id:
            await message.answer(
                "‚ùå –ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É —Å —Å–∞–º–∏–º —Å–æ–±–æ–π!\n"
                "–í–≤–µ–¥–∏—Ç–µ ID –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
            )
            return

        await state.update_data(seller_id=seller_id)
        await message.answer(
            "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞/—É—Å–ª—É–≥–∏:\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: '–ò–≥—Ä–æ–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç Steam' –∏–ª–∏ '–î–∏–∑–∞–π–Ω –ª–æ–≥–æ—Ç–∏–ø–∞'"
        )
        await state.set_state(DealCreationStates.waiting_title)

    async def process_deal_title(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏"""
        title = message.text.strip()
        
        if len(title) < 3:
            await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ! –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.")
            return
        
        if len(title) > 100:
            await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.")
            return

        await state.update_data(title=title)
        await message.answer(
            "üìÑ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞/—É—Å–ª—É–≥–∏:\n"
            "–û–ø–∏—à–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω–æ —á—Ç–æ –ø–æ–∫—É–ø–∞–µ—Ç–µ –∏ –≤–∞—à–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è."
        )
        await state.set_state(DealCreationStates.waiting_description)

    async def process_deal_description(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏"""
        description = message.text.strip()
        
        if len(description) < 10:
            await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ! –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤.")
            return

        await state.update_data(description=description)
        await message.answer(
            "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å–¥–µ–ª–∫–∏ –≤ —Ä—É–±–ª—è—Ö:\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 1500 –∏–ª–∏ 150.50"
        )
        await state.set_state(DealCreationStates.waiting_amount)

    async def process_deal_amount(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã —Å–¥–µ–ª–∫–∏"""
        try:
            amount = float(message.text.strip().replace(',', '.'))
            if amount <= 0:
                raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
            if amount > 1000000:
                raise ValueError("–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è —Å—É–º–º–∞")
        except ValueError:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã!\n"
                "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0. –ù–∞–ø—Ä–∏–º–µ—Ä: 1500 –∏–ª–∏ 150.50"
            )
            return

        data = await state.get_data()
        await state.update_data(amount=amount)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        confirmation_text = f"""‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏:

üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {data['title']}
üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {data['description'][:100]}{'...' if len(data['description']) > 100 else ''}
üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü ID: {data['seller_id']}
üí∞ –°—É–º–º–∞: {amount:,.2f} ‚ÇΩ

‚ö†Ô∏è –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥–∞–≤–µ—Ü –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ —Å–º–æ–∂–µ—Ç –ø—Ä–∏–Ω—è—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É."""

        await message.answer(
            confirmation_text,
            reply_markup=Keyboards.confirm_deal_creation(data['seller_id'])
        )
        await state.set_state(DealCreationStates.confirmation)

    async def confirm_deal_creation(self, callback: CallbackQuery, state: FSMContext):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏"""
        if not callback.data.startswith("confirm_create_deal:"):
            return

        data = await state.get_data()
        user = await self.db.get_user_by_telegram_id(callback.from_user.id)
        
        # –°–æ–∑–¥–∞–µ–º —Å–¥–µ–ª–∫—É
        deal_id = await self.db.create_deal(
            buyer_id=user['anonymous_id'],
            seller_id=data['seller_id'],
            title=data['title'],
            description=data['description'],
            amount=data['amount']
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞
        seller = await self.db.get_user_by_anonymous_id(data['seller_id'])
        await self.db.add_notification(
            user_id=data['seller_id'],
            title="–ù–æ–≤–∞—è —Å–¥–µ–ª–∫–∞!",
            message=f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–¥–µ–ª–∫—É: {data['title']} –∑–∞ {data['amount']:,.2f} ‚ÇΩ",
            deal_id=deal_id
        )

        await callback.message.edit_text(
            f"‚úÖ –°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
            f"üÜî ID —Å–¥–µ–ª–∫–∏: `{deal_id}`\n"
            f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {data['title']}\n"
            f"üí∞ –°—É–º–º–∞: {data['amount']:,.2f} ‚ÇΩ\n\n"
            f"–ü—Ä–æ–¥–∞–≤–µ—Ü –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞!",
            parse_mode="Markdown",
            reply_markup=Keyboards.back_to_main()
        )
        
        await state.clear()

    async def start_find_deal(self, message: Message, state: FSMContext):
        """–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ —Å–¥–µ–ª–∫–∏"""
        await message.answer(
            "üîç –ü–æ–∏—Å–∫ —Å–¥–µ–ª–∫–∏\n\n"
            "–í–≤–µ–¥–∏—Ç–µ ID —Å–¥–µ–ª–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            reply_markup=Keyboards.cancel_action()
        )
        await state.set_state(FindDealStates.waiting_deal_id)

    async def process_find_deal(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–¥–µ–ª–∫–∏"""
        deal_id = message.text.strip()
        
        deal = await self.db.get_deal(deal_id)
        if not deal:
            await message.answer(
                "‚ùå –°–¥–µ–ª–∫–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
            )
            return

        user = await self.db.get_user_by_telegram_id(message.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–¥–µ–ª–∫–µ
        if user['anonymous_id'] not in [deal['buyer_id'], deal['seller_id']]:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å–¥–µ–ª–∫–µ!")
            await state.clear()
            return

        await self.show_deal_details(message, deal_id, user['anonymous_id'])
        await state.clear()

    async def show_deal_details(self, message: Message, deal_id: str, user_anonymous_id: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Å–¥–µ–ª–∫–∏"""
        deal = await self.db.get_deal(deal_id)
        if not deal:
            await message.answer("‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_anonymous_id == deal['buyer_id']:
            user_role = 'buyer'
            other_party = 'seller'
            other_id = deal['seller_id']
        else:
            user_role = 'seller'
            other_party = 'buyer'
            other_id = deal['buyer_id']

        status_descriptions = {
            'waiting_seller': '‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–æ–¥–∞–≤—Ü–æ–º',
            'active': 'üîÑ –ê–∫—Ç–∏–≤–Ω–∞—è —Å–¥–µ–ª–∫–∞',
            'goods_sent': 'üì¶ –¢–æ–≤–∞—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
            'completed': '‚úÖ –°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
            'cancelled': '‚ùå –°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞',
            'dispute': '‚ö†Ô∏è –û—Ç–∫—Ä—ã—Ç —Å–ø–æ—Ä'
        }

        deal_text = f"""üìã –î–µ—Ç–∞–ª–∏ —Å–¥–µ–ª–∫–∏

üÜî ID: `{deal['deal_id']}`
üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {deal['title']}
üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {deal['description']}
üí∞ –°—É–º–º–∞: {deal['amount']:,.2f} ‚ÇΩ

üë§ –í–∞—à–∞ —Ä–æ–ª—å: {'–ü–æ–∫—É–ø–∞—Ç–µ–ª—å' if user_role == 'buyer' else '–ü—Ä–æ–¥–∞–≤–µ—Ü'}
üë• {other_party.title()}: {other_id}

üìä –°—Ç–∞—Ç—É—Å: {status_descriptions.get(deal['status'], deal['status'])}
üìÖ –°–æ–∑–¥–∞–Ω–∞: {deal['created_at']}
üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∞: {deal['updated_at']}"""

        keyboard = Keyboards.deal_actions(deal_id, user_role, deal['status'])
        
        await message.answer(
            deal_text,
            parse_mode="Markdown",
            reply_markup=keyboard
        )

    async def show_profile(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = await self.db.get_user_by_telegram_id(message.from_user.id)
        if not user:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        deals = await self.db.get_user_deals(user['anonymous_id'])
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–¥–µ–ª–∫–∞–º
        stats = {
            'total': len(deals),
            'completed': len([d for d in deals if d['status'] == 'completed']),
            'active': len([d for d in deals if d['status'] in ['active', 'goods_sent']]),
            'waiting': len([d for d in deals if d['status'] == 'waiting_seller'])
        }

        profile_text = f"""üìä –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å

üë§ –ê–Ω–æ–Ω–∏–º–Ω—ã–π ID: `{user['anonymous_id']}`
üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user['created_at']}

üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–¥–µ–ª–æ–∫:
‚Ä¢ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {stats['total']}
‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {stats['completed']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active']}
‚Ä¢ –û–∂–∏–¥–∞—é—â–∏—Ö: {stats['waiting']}

üîí –°—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if user['is_active'] else '‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}"""

        await message.answer(
            profile_text,
            parse_mode="Markdown",
            reply_markup=Keyboards.back_to_main()
        )

    async def show_notifications(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        user = await self.db.get_user_by_telegram_id(message.from_user.id)
        if not user:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        notifications = await self.db.get_unread_notifications(user['anonymous_id'])
        
        if not notifications:
            await message.answer(
                "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n"
                "–£ –≤–∞—Å –Ω–µ—Ç –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.",
                reply_markup=Keyboards.back_to_main()
            )
            return

        text = f"üîî –ù–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ({len(notifications)}):\n\n"
        
        for notif in notifications[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
            text += f"üìå {notif['title']}\n"
            text += f"üí¨ {notif['message'][:100]}{'...' if len(notif['message']) > 100 else ''}\n"
            text += f"‚è∞ {notif['created_at']}\n\n"

        await message.answer(
            text,
            reply_markup=Keyboards.back_to_main()
        )
        
        # –û—Ç–º–µ—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
        await self.db.mark_notifications_read(user['anonymous_id'])

    async def show_help(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
        help_text = """‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É

üîê –ê–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å:
‚Ä¢ –í–∞—à @username –Ω–∏–∫–æ–º—É –Ω–µ –≤–∏–¥–µ–Ω
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∞–Ω–æ–Ω–∏–º–Ω—ã–µ ID
‚Ä¢ –í—Å—è –ø–µ—Ä–µ–ø–∏—Å–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–∞

üíº –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–æ–∫:
1. –£–∑–Ω–∞–π—Ç–µ –∞–Ω–æ–Ω–∏–º–Ω—ã–π ID –ø—Ä–æ–¥–∞–≤—Ü–∞
2. –°–æ–∑–¥–∞–π—Ç–µ —Å–¥–µ–ª–∫—É —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
3. –î–æ–∂–¥–∏—Ç–µ—Å—å –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–æ–¥–∞–≤—Ü–æ–º
4. –û–±—â–∞–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —á–∞—Ç
5. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–π—Ç–µ —ç—Ç–∞–ø—ã —Å–¥–µ–ª–∫–∏

üîÑ –°—Ç–∞—Ç—É—Å—ã —Å–¥–µ–ª–æ–∫:
‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø—Ä–∏–Ω—è—Ç–∏—è - –ø—Ä–æ–¥–∞–≤–µ—Ü –µ—â–µ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª
üîÑ –ê–∫—Ç–∏–≤–Ω–∞—è - —Å–¥–µ–ª–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞, –∏–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
üì¶ –¢–æ–≤–∞—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω - –ø—Ä–æ–¥–∞–≤–µ—Ü –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–æ–≤–∞—Ä
‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞ - –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–ª—É—á–µ–Ω–∏–µ
‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞ - —Å–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞
‚ö†Ô∏è –°–ø–æ—Ä - –æ—Ç–∫—Ä—ã—Ç —Å–ø–æ—Ä –ø–æ —Å–¥–µ–ª–∫–µ

üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:
‚Ä¢ –ì–∞—Ä–∞–Ω—Ç –∑–∞—â–∏—â–∞–µ—Ç –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã
‚Ä¢ –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è
‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–ø–æ—Ä–æ–≤
‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–±–∏—Ä–∞–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã

‚ùì –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."""

        await message.answer(
            help_text,
            reply_markup=Keyboards.back_to_main()
        )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    async def handle_callback(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤"""
        data = callback.data
        
        try:
            if data.startswith("accept_deal:"):
                await self.accept_deal(callback)
            elif data.startswith("decline_deal:"):
                await self.decline_deal(callback)
            elif data.startswith("goods_sent:"):
                await self.mark_goods_sent(callback)
            elif data.startswith("confirm_receipt:"):
                await self.confirm_receipt(callback)
            elif data.startswith("open_chat:"):
                await self.open_deal_chat(callback, state)
            elif data.startswith("view_deal:"):
                deal_id = data.split(":")[1]
                user = await self.db.get_user_by_telegram_id(callback.from_user.id)
                await self.show_deal_details(callback.message, deal_id, user['anonymous_id'])
            elif data == "cancel_action":
                await state.clear()
                await callback.message.edit_text(
                    "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                    reply_markup=Keyboards.back_to_main()
                )
            elif data == "main_menu":
                await callback.message.delete()
                await callback.message.answer(
                    "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                    reply_markup=Keyboards.main_menu()
                )
            
            await callback.answer()
            
        except Exception as e:
            logger.error(f"Error handling callback {data}: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def accept_deal(self, callback: CallbackQuery):
        """–ü—Ä–∏–Ω—è—Ç—å —Å–¥–µ–ª–∫—É"""
        deal_id = callback.data.split(":")[1]
        deal = await self.db.get_deal(deal_id)
        
        if not deal:
            await callback.answer("‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return

        user = await self.db.get_user_by_telegram_id(callback.from_user.id)
        
        if user['anonymous_id'] != deal['seller_id']:
            await callback.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç—å —ç—Ç—É —Å–¥–µ–ª–∫—É!")
            return

        if deal['status'] != 'waiting_seller':
            await callback.answer("‚ùå –°–¥–µ–ª–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        await self.db.update_deal_status(deal_id, 'active')
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
        await self.db.add_notification(
            user_id=deal['buyer_id'],
            title="–°–¥–µ–ª–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!",
            message=f"–ü—Ä–æ–¥–∞–≤–µ—Ü –ø—Ä–∏–Ω—è–ª —Å–¥–µ–ª–∫—É: {deal['title']}",
            deal_id=deal_id
        )

        await callback.message.edit_text(
            f"‚úÖ –°–¥–µ–ª–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!\n\n"
            f"üìã {deal['title']}\n"
            f"üí∞ {deal['amount']:,.2f} ‚ÇΩ\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º —á–µ—Ä–µ–∑ —á–∞—Ç —Å–¥–µ–ª–∫–∏.",
            reply_markup=Keyboards.deal_actions(deal_id, 'seller', 'active')
        )

    async def decline_deal(self, callback: CallbackQuery):
        """–û—Ç–∫–ª–æ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É"""
        deal_id = callback.data.split(":")[1]
        deal = await self.db.get_deal(deal_id)
        
        if not deal:
            await callback.answer("‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return

        user = await self.db.get_user_by_telegram_id(callback.from_user.id)
        
        if user['anonymous_id'] != deal['seller_id']:
            await callback.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å —ç—Ç—É —Å–¥–µ–ª–∫—É!")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        await self.db.update_deal_status(deal_id, 'cancelled')
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
        await self.db.add_notification(
            user_id=deal['buyer_id'],
            title="–°–¥–µ–ª–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞",
            message=f"–ü—Ä–æ–¥–∞–≤–µ—Ü –æ—Ç–∫–ª–æ–Ω–∏–ª —Å–¥–µ–ª–∫—É: {deal['title']}",
            deal_id=deal_id
        )

        await callback.message.edit_text(
            f"‚ùå –°–¥–µ–ª–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n\n"
            f"üìã {deal['title']}\n"
            f"üí∞ {deal['amount']:,.2f} ‚ÇΩ",
            reply_markup=Keyboards.back_to_main()
        )

    async def mark_goods_sent(self, callback: CallbackQuery):
        """–û—Ç–º–µ—Ç–∏—Ç—å —Ç–æ–≤–∞—Ä –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π"""
        deal_id = callback.data.split(":")[1]
        deal = await self.db.get_deal(deal_id)
        
        if not deal:
            await callback.answer("‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return

        user = await self.db.get_user_by_telegram_id(callback.from_user.id)
        
        if user['anonymous_id'] != deal['seller_id']:
            await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–≤–µ—Ü –º–æ–∂–µ—Ç –æ—Ç–º–µ—Ç–∏—Ç—å —Ç–æ–≤–∞—Ä –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π!")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        await self.db.update_deal_status(deal_id, 'goods_sent')
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
        await self.db.add_notification(
            user_id=deal['buyer_id'],
            title="–¢–æ–≤–∞—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!",
            message=f"–ü—Ä–æ–¥–∞–≤–µ—Ü –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–æ–≤–∞—Ä –ø–æ —Å–¥–µ–ª–∫–µ: {deal['title']}",
            deal_id=deal_id
        )

        await callback.message.edit_text(
            f"üì¶ –¢–æ–≤–∞—Ä –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π!\n\n"
            f"üìã {deal['title']}\n"
            f"üí∞ {deal['amount']:,.2f} ‚ÇΩ\n\n"
            f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è.",
            reply_markup=Keyboards.deal_actions(deal_id, 'seller', 'goods_sent')
        )

    async def confirm_receipt(self, callback: CallbackQuery):
        """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
        deal_id = callback.data.split(":")[1]
        deal = await self.db.get_deal(deal_id)
        
        if not deal:
            await callback.answer("‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return

        user = await self.db.get_user_by_telegram_id(callback.from_user.id)
        
        if user['anonymous_id'] != deal['buyer_id']:
            await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ!")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        await self.db.update_deal_status(deal_id, 'completed')
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞
        await self.db.add_notification(
            user_id=deal['seller_id'],
            title="–°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
            message=f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {deal['title']}",
            deal_id=deal_id
        )

        await callback.message.edit_text(
            f"‚úÖ –°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"üìã {deal['title']}\n"
            f"üí∞ {deal['amount']:,.2f} ‚ÇΩ\n\n"
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!",
            reply_markup=Keyboards.back_to_main()
        )

    async def open_deal_chat(self, callback: CallbackQuery, state: FSMContext):
        """–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç —Å–¥–µ–ª–∫–∏"""
        deal_id = callback.data.split(":")[1]
        deal = await self.db.get_deal(deal_id)
        
        if not deal:
            await callback.answer("‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return

        user = await self.db.get_user_by_telegram_id(callback.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if user['anonymous_id'] not in [deal['buyer_id'], deal['seller_id']]:
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —á–∞—Ç—É!")
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        messages = await self.db.get_deal_messages(deal_id, limit=20)
        
        chat_text = f"üí¨ –ß–∞—Ç —Å–¥–µ–ª–∫–∏: {deal['title']}\n\n"
        
        if not messages:
            chat_text += "–°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç. –ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ!"
        else:
            for msg in messages[-10:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
                sender_role = "–í—ã" if msg['sender_id'] == user['anonymous_id'] else "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫"
                timestamp = msg['timestamp'][:16]  # –£–±–∏—Ä–∞–µ–º —Å–µ–∫—É–Ω–¥—ã
                chat_text += f"[{timestamp}] {sender_role}: {msg['content']}\n"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Ç–∞
        user_chat_states[callback.from_user.id] = deal_id

        await callback.message.edit_text(
            chat_text,
            reply_markup=Keyboards.deal_chat_actions(deal_id)
        )

    async def handle_chat_message(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ —Å–¥–µ–ª–∫–∏"""
        user_id = message.from_user.id
        
        if user_id not in user_chat_states:
            return  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —á–∞—Ç–µ —Å–¥–µ–ª–∫–∏

        deal_id = user_chat_states[user_id]
        user = await self.db.get_user_by_telegram_id(user_id)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É
        await self.db.add_message(
            deal_id=deal_id,
            sender_id=user['anonymous_id'],
            content=message.text,
            message_type='text'
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥—É—é —Å—Ç–æ—Ä–æ–Ω—É
        deal = await self.db.get_deal(deal_id)
        other_party = deal['seller_id'] if user['anonymous_id'] == deal['buyer_id'] else deal['buyer_id']
        
        await self.db.add_notification(
            user_id=other_party,
            title="–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            message=f"–°–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ —Å–¥–µ–ª–∫–∏: {deal['title']}",
            deal_id=deal_id
        )

        await message.answer(
            "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!",
            reply_markup=Keyboards.deal_chat_actions(deal_id)
        )


def setup_handlers(dp, db: Database):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    handlers = Handlers(db)
    
    # –ö–æ–º–∞–Ω–¥—ã
    dp.message.register(handlers.cmd_start, Command("start"))
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    dp.message.register(
        handlers.handle_main_menu,
        F.text.in_(["üíº –ú–æ–∏ —Å–¥–µ–ª–∫–∏", "üÜï –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É", "üîç –ù–∞–π—Ç–∏ —Å–¥–µ–ª–∫—É", 
                   "üìä –ü—Ä–æ—Ñ–∏–ª—å", "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "‚ÑπÔ∏è –ü–æ–º–æ—â—å"])
    )
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏
    dp.message.register(handlers.process_seller_id, DealCreationStates.waiting_seller_id)
    dp.message.register(handlers.process_deal_title, DealCreationStates.waiting_title)
    dp.message.register(handlers.process_deal_description, DealCreationStates.waiting_description)
    dp.message.register(handlers.process_deal_amount, DealCreationStates.waiting_amount)
    
    # –ü–æ–∏—Å–∫ —Å–¥–µ–ª–∫–∏
    dp.message.register(handlers.process_find_deal, FindDealStates.waiting_deal_id)
    
    # –°–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ (–∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —á–∞—Ç–∞)
    dp.message.register(handlers.handle_chat_message, F.text)
    
    # Callback-–∑–∞–ø—Ä–æ—Å—ã
    dp.callback_query.register(handlers.handle_callback)