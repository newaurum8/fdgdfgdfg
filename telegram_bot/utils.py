import re
import hashlib
from datetime import datetime, timedelta
from typing import Dict, List, Optional

class MessageFormatter:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    @staticmethod
    def format_deal_status(status: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–¥–µ–ª–∫–∏ —Å —ç–º–æ–¥–∑–∏"""
        status_map = {
            'waiting_seller': '‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–æ–¥–∞–≤—Ü–æ–º',
            'active': 'üîÑ –ê–∫—Ç–∏–≤–Ω–∞—è —Å–¥–µ–ª–∫–∞',
            'goods_sent': 'üì¶ –¢–æ–≤–∞—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
            'completed': '‚úÖ –°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
            'cancelled': '‚ùå –°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞',
            'dispute': '‚ö†Ô∏è –û—Ç–∫—Ä—ã—Ç —Å–ø–æ—Ä'
        }
        return status_map.get(status, f"‚ùì {status}")
    
    @staticmethod
    def format_amount(amount: float) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–º—ã"""
        return f"{amount:,.2f} ‚ÇΩ"
    
    @staticmethod
    def format_datetime(dt_string: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            dt = datetime.fromisoformat(dt_string.replace('Z', '+00:00'))
            return dt.strftime("%d.%m.%Y %H:%M")
        except:
            return dt_string
    
    @staticmethod
    def truncate_text(text: str, max_length: int = 100) -> str:
        """–û–±—Ä–µ–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ–º"""
        if len(text) <= max_length:
            return text
        return text[:max_length-3] + "..."

class Validator:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    
    @staticmethod
    def validate_anonymous_id(anonymous_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ ID"""
        return bool(re.match(r'^[a-zA-Z0-9]{8}$', anonymous_id))
    
    @staticmethod
    def validate_amount(amount_str: str) -> Optional[float]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–∞—Ä—Å–∏–Ω–≥ —Å—É–º–º—ã"""
        try:
            amount = float(amount_str.replace(',', '.').strip())
            if 0 < amount <= 1000000:
                return amount
        except ValueError:
            pass
        return None
    
    @staticmethod
    def validate_title(title: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏"""
        return 3 <= len(title.strip()) <= 100
    
    @staticmethod
    def validate_description(description: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏"""
        return 10 <= len(description.strip()) <= 1000

class Security:
    """–§—É–Ω–∫—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    
    @staticmethod
    def hash_user_data(user_id: int, username: str = "") -> str:
        """–•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏–∏"""
        data = f"{user_id}:{username}:{datetime.now().timestamp()}"
        return hashlib.md5(data.encode()).hexdigest()[:8]
    
    @staticmethod
    def is_safe_content(content: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å"""
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        dangerous_patterns = [
            r'https?://.*',  # –°—Å—ã–ª–∫–∏
            r'@\w+',  # –£–ø–æ–º–∏–Ω–∞–Ω–∏—è
            r'[+]\d{11,15}',  # –ù–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
        ]
        
        for pattern in dangerous_patterns:
            if re.search(pattern, content, re.IGNORECASE):
                return False
        return True

class Statistics:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞"""
    
    @staticmethod
    def calculate_user_stats(deals: List[Dict]) -> Dict:
        """–†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        stats = {
            'total_deals': len(deals),
            'completed_deals': 0,
            'active_deals': 0,
            'cancelled_deals': 0,
            'total_amount': 0.0,
            'avg_amount': 0.0,
            'success_rate': 0.0
        }
        
        if not deals:
            return stats
        
        for deal in deals:
            if deal['status'] == 'completed':
                stats['completed_deals'] += 1
                stats['total_amount'] += deal['amount']
            elif deal['status'] in ['active', 'goods_sent']:
                stats['active_deals'] += 1
            elif deal['status'] == 'cancelled':
                stats['cancelled_deals'] += 1
        
        if stats['completed_deals'] > 0:
            stats['avg_amount'] = stats['total_amount'] / stats['completed_deals']
        
        if stats['total_deals'] > 0:
            stats['success_rate'] = (stats['completed_deals'] / stats['total_deals']) * 100
        
        return stats

class ChatManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏ —Å–¥–µ–ª–æ–∫"""
    
    def __init__(self):
        self.active_chats = {}  # user_id: deal_id
    
    def enter_chat(self, user_id: int, deal_id: str):
        """–í–æ–π—Ç–∏ –≤ —á–∞—Ç —Å–¥–µ–ª–∫–∏"""
        self.active_chats[user_id] = deal_id
    
    def exit_chat(self, user_id: int):
        """–í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞ —Å–¥–µ–ª–∫–∏"""
        if user_id in self.active_chats:
            del self.active_chats[user_id]
    
    def get_active_chat(self, user_id: int) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self.active_chats.get(user_id)
    
    def is_in_chat(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–∞—Ç–µ"""
        return user_id in self.active_chats

class NotificationManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
    
    @staticmethod
    def create_deal_notification(deal_title: str, amount: float, action: str) -> Dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–¥–µ–ª–∫–µ"""
        action_messages = {
            'created': f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–¥–µ–ª–∫–∞: {deal_title} –Ω–∞ —Å—É–º–º—É {MessageFormatter.format_amount(amount)}",
            'accepted': f"–°–¥–µ–ª–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞: {deal_title}",
            'declined': f"–°–¥–µ–ª–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞: {deal_title}",
            'goods_sent': f"–¢–æ–≤–∞—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ —Å–¥–µ–ª–∫–µ: {deal_title}",
            'completed': f"–°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {deal_title}",
            'dispute': f"–û—Ç–∫—Ä—ã—Ç —Å–ø–æ—Ä –ø–æ —Å–¥–µ–ª–∫–µ: {deal_title}"
        }
        
        return {
            'title': action_messages.get(action, f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏: {deal_title}"),
            'message': action_messages.get(action, "–ü—Ä–æ–∏–∑–æ—à–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏")
        }
    
    @staticmethod
    def create_message_notification(deal_title: str, sender_role: str) -> Dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏"""
        return {
            'title': "–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            'message': f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {'–ø–æ–∫—É–ø–∞—Ç–µ–ª—è' if sender_role == 'buyer' else '–ø—Ä–æ–¥–∞–≤—Ü–∞'} –≤ —Å–¥–µ–ª–∫–µ: {deal_title}"
        }

class FileHandler:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤"""
    
    @staticmethod
    def get_file_info(file_name: str, file_size: int) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ"""
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
        image_extensions = ['.jpg', '.jpeg', '.png', '.gif', '.webp']
        document_extensions = ['.pdf', '.doc', '.docx', '.txt', '.zip', '.rar']
        
        file_ext = '.' + file_name.split('.')[-1].lower() if '.' in file_name else ''
        
        if file_ext in image_extensions:
            file_type = 'image'
        elif file_ext in document_extensions:
            file_type = 'document'
        else:
            file_type = 'other'
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
        if file_size < 1024:
            size_str = f"{file_size} B"
        elif file_size < 1024 * 1024:
            size_str = f"{file_size / 1024:.1f} KB"
        else:
            size_str = f"{file_size / (1024 * 1024):.1f} MB"
        
        return {
            'name': file_name,
            'size': file_size,
            'size_str': size_str,
            'type': file_type,
            'extension': file_ext
        }

class TimeUtils:
    """–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º"""
    
    @staticmethod
    def time_ago(dt_string: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'X –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥'"""
        try:
            dt = datetime.fromisoformat(dt_string.replace('Z', '+00:00'))
            now = datetime.now(dt.tzinfo) if dt.tzinfo else datetime.now()
            delta = now - dt
            
            if delta.days > 0:
                return f"{delta.days} –¥–Ω. –Ω–∞–∑–∞–¥"
            elif delta.seconds > 3600:
                hours = delta.seconds // 3600
                return f"{hours} —á. –Ω–∞–∑–∞–¥"
            elif delta.seconds > 60:
                minutes = delta.seconds // 60
                return f"{minutes} –º–∏–Ω. –Ω–∞–∑–∞–¥"
            else:
                return "—Ç–æ–ª—å–∫–æ —á—Ç–æ"
        except:
            return dt_string
    
    @staticmethod
    def add_hours(dt_string: str, hours: int) -> str:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —á–∞—Å—ã –∫ –¥–∞—Ç–µ"""
        try:
            dt = datetime.fromisoformat(dt_string.replace('Z', '+00:00'))
            new_dt = dt + timedelta(hours=hours)
            return new_dt.isoformat()
        except:
            return dt_string

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
chat_manager = ChatManager()
message_formatter = MessageFormatter()
validator = Validator()
security = Security()
notification_manager = NotificationManager()
file_handler = FileHandler()
time_utils = TimeUtils()